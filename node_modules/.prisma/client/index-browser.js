
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.1
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.1",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AdminScalarFieldEnum = {
  adminId: 'adminId',
  adminUsername: 'adminUsername',
  adminEmail: 'adminEmail',
  adminPassword: 'adminPassword'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  applicationName: 'applicationName',
  applicationGovId: 'applicationGovId',
  amount: 'amount',
  loanId: 'loanId',
  monthly_income: 'monthly_income',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.BankScalarFieldEnum = {
  id: 'id',
  bankName: 'bankName'
};

exports.Prisma.DsaScalarFieldEnum = {
  dsaId: 'dsaId',
  totalCommission: 'totalCommission',
  commissionRemaining: 'commissionRemaining',
  amountLoan: 'amountLoan',
  loansIssued: 'loansIssued',
  commissionPercentage: 'commissionPercentage'
};

exports.Prisma.LoanScalarFieldEnum = {
  id: 'id',
  typeId: 'typeId',
  bankId: 'bankId',
  interest: 'interest',
  commission: 'commission'
};

exports.Prisma.LoanTypeScalarFieldEnum = {
  id: 'id',
  loanName: 'loanName'
};

exports.Prisma.PrefrScalarFieldEnum = {
  applicationId: 'applicationId',
  loanId: 'loanId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.StatusScalarFieldEnum = {
  id: 'id',
  status: 'status',
  userId: 'userId',
  applicationId: 'applicationId',
  commissionAdded: 'commissionAdded',
  remark: 'remark'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  role: 'role',
  phoneNumber: 'phoneNumber',
  name: 'name',
  city: 'city',
  pincode: 'pincode',
  createdAt: 'createdAt'
};


exports.Prisma.ModelName = {
  User: 'User',
  Loan: 'Loan',
  Application: 'Application',
  Status: 'Status',
  LoanType: 'LoanType',
  Bank: 'Bank',
  Dsa: 'Dsa',
  Admin: 'Admin',
  Prefr: 'Prefr'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
