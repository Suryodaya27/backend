
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  username: string
  email: string
  password: string
  role: string
  phoneNumber: string
  name: string
  city: string
  pincode: string
  createdAt: Date
}

/**
 * Model Loan
 * 
 */
export type Loan = {
  id: number
  typeId: number
  bankId: number
  interest: number
  commission: number
}

/**
 * Model Application
 * 
 */
export type Application = {
  id: number
  applicationName: string
  applicationGovId: string
  amount: number
  loanId: number
  monthly_income: number
  userId: number
  createdAt: Date
}

/**
 * Model Status
 * 
 */
export type Status = {
  id: number
  status: string
  userId: number
  applicationId: number
  commissionAdded: boolean
  remark: string
}

/**
 * Model LoanType
 * 
 */
export type LoanType = {
  id: number
  loanName: string
}

/**
 * Model Bank
 * 
 */
export type Bank = {
  id: number
  bankName: string
}

/**
 * Model Dsa
 * 
 */
export type Dsa = {
  dsaId: number
  totalCommission: number
  commissionRemaining: number
  amountLoan: number
  loansIssued: number
  commissionPercentage: number
}

/**
 * Model Admin
 * 
 */
export type Admin = {
  adminId: number
  adminUsername: string
  adminEmail: string
  adminPassword: string
}

/**
 * Model Prefr
 * 
 */
export type Prefr = {
  applicationId: number
  loanId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.loan`: Exposes CRUD operations for the **Loan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Loans
    * const loans = await prisma.loan.findMany()
    * ```
    */
  get loan(): Prisma.LoanDelegate<GlobalReject>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<GlobalReject>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<GlobalReject>;

  /**
   * `prisma.loanType`: Exposes CRUD operations for the **LoanType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoanTypes
    * const loanTypes = await prisma.loanType.findMany()
    * ```
    */
  get loanType(): Prisma.LoanTypeDelegate<GlobalReject>;

  /**
   * `prisma.bank`: Exposes CRUD operations for the **Bank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banks
    * const banks = await prisma.bank.findMany()
    * ```
    */
  get bank(): Prisma.BankDelegate<GlobalReject>;

  /**
   * `prisma.dsa`: Exposes CRUD operations for the **Dsa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dsas
    * const dsas = await prisma.dsa.findMany()
    * ```
    */
  get dsa(): Prisma.DsaDelegate<GlobalReject>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<GlobalReject>;

  /**
   * `prisma.prefr`: Exposes CRUD operations for the **Prefr** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prefrs
    * const prefrs = await prisma.prefr.findMany()
    * ```
    */
  get prefr(): Prisma.PrefrDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Loan: 'Loan',
    Application: 'Application',
    Status: 'Status',
    LoanType: 'LoanType',
    Bank: 'Bank',
    Dsa: 'Dsa',
    Admin: 'Admin',
    Prefr: 'Prefr'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    applications: number
    statuses: number
    dsa: number
  }

  export type UserCountOutputTypeSelect = {
    applications?: boolean
    statuses?: boolean
    dsa?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type LoanCountOutputType
   */


  export type LoanCountOutputType = {
    applications: number
  }

  export type LoanCountOutputTypeSelect = {
    applications?: boolean
  }

  export type LoanCountOutputTypeGetPayload<S extends boolean | null | undefined | LoanCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LoanCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LoanCountOutputTypeArgs)
    ? LoanCountOutputType 
    : S extends { select: any } & (LoanCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LoanCountOutputType ? LoanCountOutputType[P] : never
  } 
      : LoanCountOutputType




  // Custom InputTypes

  /**
   * LoanCountOutputType without action
   */
  export type LoanCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LoanCountOutputType
     */
    select?: LoanCountOutputTypeSelect | null
  }



  /**
   * Count Type ApplicationCountOutputType
   */


  export type ApplicationCountOutputType = {
    statuses: number
    prefr: number
  }

  export type ApplicationCountOutputTypeSelect = {
    statuses?: boolean
    prefr?: boolean
  }

  export type ApplicationCountOutputTypeGetPayload<S extends boolean | null | undefined | ApplicationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ApplicationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ApplicationCountOutputTypeArgs)
    ? ApplicationCountOutputType 
    : S extends { select: any } & (ApplicationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ApplicationCountOutputType ? ApplicationCountOutputType[P] : never
  } 
      : ApplicationCountOutputType




  // Custom InputTypes

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ApplicationCountOutputType
     */
    select?: ApplicationCountOutputTypeSelect | null
  }



  /**
   * Count Type LoanTypeCountOutputType
   */


  export type LoanTypeCountOutputType = {
    loans: number
  }

  export type LoanTypeCountOutputTypeSelect = {
    loans?: boolean
  }

  export type LoanTypeCountOutputTypeGetPayload<S extends boolean | null | undefined | LoanTypeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LoanTypeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LoanTypeCountOutputTypeArgs)
    ? LoanTypeCountOutputType 
    : S extends { select: any } & (LoanTypeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LoanTypeCountOutputType ? LoanTypeCountOutputType[P] : never
  } 
      : LoanTypeCountOutputType




  // Custom InputTypes

  /**
   * LoanTypeCountOutputType without action
   */
  export type LoanTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LoanTypeCountOutputType
     */
    select?: LoanTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type BankCountOutputType
   */


  export type BankCountOutputType = {
    loans: number
  }

  export type BankCountOutputTypeSelect = {
    loans?: boolean
  }

  export type BankCountOutputTypeGetPayload<S extends boolean | null | undefined | BankCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BankCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BankCountOutputTypeArgs)
    ? BankCountOutputType 
    : S extends { select: any } & (BankCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BankCountOutputType ? BankCountOutputType[P] : never
  } 
      : BankCountOutputType




  // Custom InputTypes

  /**
   * BankCountOutputType without action
   */
  export type BankCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BankCountOutputType
     */
    select?: BankCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    role: string | null
    phoneNumber: string | null
    name: string | null
    city: string | null
    pincode: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    role: string | null
    phoneNumber: string | null
    name: string | null
    city: string | null
    pincode: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    role: number
    phoneNumber: number
    name: number
    city: number
    pincode: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    phoneNumber?: true
    name?: true
    city?: true
    pincode?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    phoneNumber?: true
    name?: true
    city?: true
    pincode?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    phoneNumber?: true
    name?: true
    city?: true
    pincode?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    phoneNumber?: boolean
    name?: boolean
    city?: boolean
    pincode?: boolean
    createdAt?: boolean
    applications?: boolean | User$applicationsArgs
    statuses?: boolean | User$statusesArgs
    dsa?: boolean | User$dsaArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    applications?: boolean | User$applicationsArgs
    statuses?: boolean | User$statusesArgs
    dsa?: boolean | User$dsaArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'applications' ? Array < ApplicationGetPayload<S['include'][P]>>  :
        P extends 'statuses' ? Array < StatusGetPayload<S['include'][P]>>  :
        P extends 'dsa' ? Array < DsaGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'applications' ? Array < ApplicationGetPayload<S['select'][P]>>  :
        P extends 'statuses' ? Array < StatusGetPayload<S['select'][P]>>  :
        P extends 'dsa' ? Array < DsaGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    applications<T extends User$applicationsArgs= {}>(args?: Subset<T, User$applicationsArgs>): Prisma.PrismaPromise<Array<ApplicationGetPayload<T>>| Null>;

    statuses<T extends User$statusesArgs= {}>(args?: Subset<T, User$statusesArgs>): Prisma.PrismaPromise<Array<StatusGetPayload<T>>| Null>;

    dsa<T extends User$dsaArgs= {}>(args?: Subset<T, User$dsaArgs>): Prisma.PrismaPromise<Array<DsaGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.applications
   */
  export type User$applicationsArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    where?: ApplicationWhereInput
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }


  /**
   * User.statuses
   */
  export type User$statusesArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    where?: StatusWhereInput
    orderBy?: Enumerable<StatusOrderByWithRelationInput>
    cursor?: StatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * User.dsa
   */
  export type User$dsaArgs = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    where?: DsaWhereInput
    orderBy?: Enumerable<DsaOrderByWithRelationInput>
    cursor?: DsaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DsaScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Loan
   */


  export type AggregateLoan = {
    _count: LoanCountAggregateOutputType | null
    _avg: LoanAvgAggregateOutputType | null
    _sum: LoanSumAggregateOutputType | null
    _min: LoanMinAggregateOutputType | null
    _max: LoanMaxAggregateOutputType | null
  }

  export type LoanAvgAggregateOutputType = {
    id: number | null
    typeId: number | null
    bankId: number | null
    interest: number | null
    commission: number | null
  }

  export type LoanSumAggregateOutputType = {
    id: number | null
    typeId: number | null
    bankId: number | null
    interest: number | null
    commission: number | null
  }

  export type LoanMinAggregateOutputType = {
    id: number | null
    typeId: number | null
    bankId: number | null
    interest: number | null
    commission: number | null
  }

  export type LoanMaxAggregateOutputType = {
    id: number | null
    typeId: number | null
    bankId: number | null
    interest: number | null
    commission: number | null
  }

  export type LoanCountAggregateOutputType = {
    id: number
    typeId: number
    bankId: number
    interest: number
    commission: number
    _all: number
  }


  export type LoanAvgAggregateInputType = {
    id?: true
    typeId?: true
    bankId?: true
    interest?: true
    commission?: true
  }

  export type LoanSumAggregateInputType = {
    id?: true
    typeId?: true
    bankId?: true
    interest?: true
    commission?: true
  }

  export type LoanMinAggregateInputType = {
    id?: true
    typeId?: true
    bankId?: true
    interest?: true
    commission?: true
  }

  export type LoanMaxAggregateInputType = {
    id?: true
    typeId?: true
    bankId?: true
    interest?: true
    commission?: true
  }

  export type LoanCountAggregateInputType = {
    id?: true
    typeId?: true
    bankId?: true
    interest?: true
    commission?: true
    _all?: true
  }

  export type LoanAggregateArgs = {
    /**
     * Filter which Loan to aggregate.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: Enumerable<LoanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Loans
    **/
    _count?: true | LoanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoanMaxAggregateInputType
  }

  export type GetLoanAggregateType<T extends LoanAggregateArgs> = {
        [P in keyof T & keyof AggregateLoan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoan[P]>
      : GetScalarType<T[P], AggregateLoan[P]>
  }




  export type LoanGroupByArgs = {
    where?: LoanWhereInput
    orderBy?: Enumerable<LoanOrderByWithAggregationInput>
    by: LoanScalarFieldEnum[]
    having?: LoanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoanCountAggregateInputType | true
    _avg?: LoanAvgAggregateInputType
    _sum?: LoanSumAggregateInputType
    _min?: LoanMinAggregateInputType
    _max?: LoanMaxAggregateInputType
  }


  export type LoanGroupByOutputType = {
    id: number
    typeId: number
    bankId: number
    interest: number
    commission: number
    _count: LoanCountAggregateOutputType | null
    _avg: LoanAvgAggregateOutputType | null
    _sum: LoanSumAggregateOutputType | null
    _min: LoanMinAggregateOutputType | null
    _max: LoanMaxAggregateOutputType | null
  }

  type GetLoanGroupByPayload<T extends LoanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LoanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoanGroupByOutputType[P]>
            : GetScalarType<T[P], LoanGroupByOutputType[P]>
        }
      >
    >


  export type LoanSelect = {
    id?: boolean
    typeId?: boolean
    bankId?: boolean
    interest?: boolean
    commission?: boolean
    loanType?: boolean | LoanTypeArgs
    bank?: boolean | BankArgs
    applications?: boolean | Loan$applicationsArgs
    _count?: boolean | LoanCountOutputTypeArgs
  }


  export type LoanInclude = {
    loanType?: boolean | LoanTypeArgs
    bank?: boolean | BankArgs
    applications?: boolean | Loan$applicationsArgs
    _count?: boolean | LoanCountOutputTypeArgs
  }

  export type LoanGetPayload<S extends boolean | null | undefined | LoanArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Loan :
    S extends undefined ? never :
    S extends { include: any } & (LoanArgs | LoanFindManyArgs)
    ? Loan  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'loanType' ? LoanTypeGetPayload<S['include'][P]> :
        P extends 'bank' ? BankGetPayload<S['include'][P]> :
        P extends 'applications' ? Array < ApplicationGetPayload<S['include'][P]>>  :
        P extends '_count' ? LoanCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LoanArgs | LoanFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'loanType' ? LoanTypeGetPayload<S['select'][P]> :
        P extends 'bank' ? BankGetPayload<S['select'][P]> :
        P extends 'applications' ? Array < ApplicationGetPayload<S['select'][P]>>  :
        P extends '_count' ? LoanCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Loan ? Loan[P] : never
  } 
      : Loan


  type LoanCountArgs = 
    Omit<LoanFindManyArgs, 'select' | 'include'> & {
      select?: LoanCountAggregateInputType | true
    }

  export interface LoanDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Loan that matches the filter.
     * @param {LoanFindUniqueArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoanFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LoanFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Loan'> extends True ? Prisma__LoanClient<LoanGetPayload<T>> : Prisma__LoanClient<LoanGetPayload<T> | null, null>

    /**
     * Find one Loan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LoanFindUniqueOrThrowArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LoanFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LoanFindUniqueOrThrowArgs>
    ): Prisma__LoanClient<LoanGetPayload<T>>

    /**
     * Find the first Loan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindFirstArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoanFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LoanFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Loan'> extends True ? Prisma__LoanClient<LoanGetPayload<T>> : Prisma__LoanClient<LoanGetPayload<T> | null, null>

    /**
     * Find the first Loan that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindFirstOrThrowArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LoanFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LoanFindFirstOrThrowArgs>
    ): Prisma__LoanClient<LoanGetPayload<T>>

    /**
     * Find zero or more Loans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Loans
     * const loans = await prisma.loan.findMany()
     * 
     * // Get first 10 Loans
     * const loans = await prisma.loan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loanWithIdOnly = await prisma.loan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoanFindManyArgs>(
      args?: SelectSubset<T, LoanFindManyArgs>
    ): Prisma.PrismaPromise<Array<LoanGetPayload<T>>>

    /**
     * Create a Loan.
     * @param {LoanCreateArgs} args - Arguments to create a Loan.
     * @example
     * // Create one Loan
     * const Loan = await prisma.loan.create({
     *   data: {
     *     // ... data to create a Loan
     *   }
     * })
     * 
    **/
    create<T extends LoanCreateArgs>(
      args: SelectSubset<T, LoanCreateArgs>
    ): Prisma__LoanClient<LoanGetPayload<T>>

    /**
     * Create many Loans.
     *     @param {LoanCreateManyArgs} args - Arguments to create many Loans.
     *     @example
     *     // Create many Loans
     *     const loan = await prisma.loan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LoanCreateManyArgs>(
      args?: SelectSubset<T, LoanCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Loan.
     * @param {LoanDeleteArgs} args - Arguments to delete one Loan.
     * @example
     * // Delete one Loan
     * const Loan = await prisma.loan.delete({
     *   where: {
     *     // ... filter to delete one Loan
     *   }
     * })
     * 
    **/
    delete<T extends LoanDeleteArgs>(
      args: SelectSubset<T, LoanDeleteArgs>
    ): Prisma__LoanClient<LoanGetPayload<T>>

    /**
     * Update one Loan.
     * @param {LoanUpdateArgs} args - Arguments to update one Loan.
     * @example
     * // Update one Loan
     * const loan = await prisma.loan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoanUpdateArgs>(
      args: SelectSubset<T, LoanUpdateArgs>
    ): Prisma__LoanClient<LoanGetPayload<T>>

    /**
     * Delete zero or more Loans.
     * @param {LoanDeleteManyArgs} args - Arguments to filter Loans to delete.
     * @example
     * // Delete a few Loans
     * const { count } = await prisma.loan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoanDeleteManyArgs>(
      args?: SelectSubset<T, LoanDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Loans
     * const loan = await prisma.loan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoanUpdateManyArgs>(
      args: SelectSubset<T, LoanUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Loan.
     * @param {LoanUpsertArgs} args - Arguments to update or create a Loan.
     * @example
     * // Update or create a Loan
     * const loan = await prisma.loan.upsert({
     *   create: {
     *     // ... data to create a Loan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Loan we want to update
     *   }
     * })
    **/
    upsert<T extends LoanUpsertArgs>(
      args: SelectSubset<T, LoanUpsertArgs>
    ): Prisma__LoanClient<LoanGetPayload<T>>

    /**
     * Count the number of Loans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanCountArgs} args - Arguments to filter Loans to count.
     * @example
     * // Count the number of Loans
     * const count = await prisma.loan.count({
     *   where: {
     *     // ... the filter for the Loans we want to count
     *   }
     * })
    **/
    count<T extends LoanCountArgs>(
      args?: Subset<T, LoanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Loan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoanAggregateArgs>(args: Subset<T, LoanAggregateArgs>): Prisma.PrismaPromise<GetLoanAggregateType<T>>

    /**
     * Group by Loan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoanGroupByArgs['orderBy'] }
        : { orderBy?: LoanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Loan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LoanClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    loanType<T extends LoanTypeArgs= {}>(args?: Subset<T, LoanTypeArgs>): Prisma__LoanTypeClient<LoanTypeGetPayload<T> | Null>;

    bank<T extends BankArgs= {}>(args?: Subset<T, BankArgs>): Prisma__BankClient<BankGetPayload<T> | Null>;

    applications<T extends Loan$applicationsArgs= {}>(args?: Subset<T, Loan$applicationsArgs>): Prisma.PrismaPromise<Array<ApplicationGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Loan base type for findUnique actions
   */
  export type LoanFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    /**
     * Filter, which Loan to fetch.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan findUnique
   */
  export interface LoanFindUniqueArgs extends LoanFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Loan findUniqueOrThrow
   */
  export type LoanFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    /**
     * Filter, which Loan to fetch.
     */
    where: LoanWhereUniqueInput
  }


  /**
   * Loan base type for findFirst actions
   */
  export type LoanFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    /**
     * Filter, which Loan to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: Enumerable<LoanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loans.
     */
    distinct?: Enumerable<LoanScalarFieldEnum>
  }

  /**
   * Loan findFirst
   */
  export interface LoanFindFirstArgs extends LoanFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Loan findFirstOrThrow
   */
  export type LoanFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    /**
     * Filter, which Loan to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: Enumerable<LoanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loans.
     */
    distinct?: Enumerable<LoanScalarFieldEnum>
  }


  /**
   * Loan findMany
   */
  export type LoanFindManyArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    /**
     * Filter, which Loans to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: Enumerable<LoanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    distinct?: Enumerable<LoanScalarFieldEnum>
  }


  /**
   * Loan create
   */
  export type LoanCreateArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    /**
     * The data needed to create a Loan.
     */
    data: XOR<LoanCreateInput, LoanUncheckedCreateInput>
  }


  /**
   * Loan createMany
   */
  export type LoanCreateManyArgs = {
    /**
     * The data used to create many Loans.
     */
    data: Enumerable<LoanCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Loan update
   */
  export type LoanUpdateArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    /**
     * The data needed to update a Loan.
     */
    data: XOR<LoanUpdateInput, LoanUncheckedUpdateInput>
    /**
     * Choose, which Loan to update.
     */
    where: LoanWhereUniqueInput
  }


  /**
   * Loan updateMany
   */
  export type LoanUpdateManyArgs = {
    /**
     * The data used to update Loans.
     */
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyInput>
    /**
     * Filter which Loans to update
     */
    where?: LoanWhereInput
  }


  /**
   * Loan upsert
   */
  export type LoanUpsertArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    /**
     * The filter to search for the Loan to update in case it exists.
     */
    where: LoanWhereUniqueInput
    /**
     * In case the Loan found by the `where` argument doesn't exist, create a new Loan with this data.
     */
    create: XOR<LoanCreateInput, LoanUncheckedCreateInput>
    /**
     * In case the Loan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoanUpdateInput, LoanUncheckedUpdateInput>
  }


  /**
   * Loan delete
   */
  export type LoanDeleteArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    /**
     * Filter which Loan to delete.
     */
    where: LoanWhereUniqueInput
  }


  /**
   * Loan deleteMany
   */
  export type LoanDeleteManyArgs = {
    /**
     * Filter which Loans to delete
     */
    where?: LoanWhereInput
  }


  /**
   * Loan.applications
   */
  export type Loan$applicationsArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    where?: ApplicationWhereInput
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }


  /**
   * Loan without action
   */
  export type LoanArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
  }



  /**
   * Model Application
   */


  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    loanId: number | null
    monthly_income: number | null
    userId: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    id: number | null
    amount: number | null
    loanId: number | null
    monthly_income: number | null
    userId: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: number | null
    applicationName: string | null
    applicationGovId: string | null
    amount: number | null
    loanId: number | null
    monthly_income: number | null
    userId: number | null
    createdAt: Date | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: number | null
    applicationName: string | null
    applicationGovId: string | null
    amount: number | null
    loanId: number | null
    monthly_income: number | null
    userId: number | null
    createdAt: Date | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    applicationName: number
    applicationGovId: number
    amount: number
    loanId: number
    monthly_income: number
    userId: number
    createdAt: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    id?: true
    amount?: true
    loanId?: true
    monthly_income?: true
    userId?: true
  }

  export type ApplicationSumAggregateInputType = {
    id?: true
    amount?: true
    loanId?: true
    monthly_income?: true
    userId?: true
  }

  export type ApplicationMinAggregateInputType = {
    id?: true
    applicationName?: true
    applicationGovId?: true
    amount?: true
    loanId?: true
    monthly_income?: true
    userId?: true
    createdAt?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    applicationName?: true
    applicationGovId?: true
    amount?: true
    loanId?: true
    monthly_income?: true
    userId?: true
    createdAt?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    applicationName?: true
    applicationGovId?: true
    amount?: true
    loanId?: true
    monthly_income?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type ApplicationAggregateArgs = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs = {
    where?: ApplicationWhereInput
    orderBy?: Enumerable<ApplicationOrderByWithAggregationInput>
    by: ApplicationScalarFieldEnum[]
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }


  export type ApplicationGroupByOutputType = {
    id: number
    applicationName: string
    applicationGovId: string
    amount: number
    loanId: number
    monthly_income: number
    userId: number
    createdAt: Date
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect = {
    id?: boolean
    applicationName?: boolean
    applicationGovId?: boolean
    amount?: boolean
    loanId?: boolean
    monthly_income?: boolean
    userId?: boolean
    createdAt?: boolean
    loan?: boolean | LoanArgs
    user?: boolean | UserArgs
    statuses?: boolean | Application$statusesArgs
    prefr?: boolean | Application$prefrArgs
    _count?: boolean | ApplicationCountOutputTypeArgs
  }


  export type ApplicationInclude = {
    loan?: boolean | LoanArgs
    user?: boolean | UserArgs
    statuses?: boolean | Application$statusesArgs
    prefr?: boolean | Application$prefrArgs
    _count?: boolean | ApplicationCountOutputTypeArgs
  }

  export type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Application :
    S extends undefined ? never :
    S extends { include: any } & (ApplicationArgs | ApplicationFindManyArgs)
    ? Application  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'loan' ? LoanGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'statuses' ? Array < StatusGetPayload<S['include'][P]>>  :
        P extends 'prefr' ? Array < PrefrGetPayload<S['include'][P]>>  :
        P extends '_count' ? ApplicationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ApplicationArgs | ApplicationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'loan' ? LoanGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'statuses' ? Array < StatusGetPayload<S['select'][P]>>  :
        P extends 'prefr' ? Array < PrefrGetPayload<S['select'][P]>>  :
        P extends '_count' ? ApplicationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Application ? Application[P] : never
  } 
      : Application


  type ApplicationCountArgs = 
    Omit<ApplicationFindManyArgs, 'select' | 'include'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApplicationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApplicationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Application'> extends True ? Prisma__ApplicationClient<ApplicationGetPayload<T>> : Prisma__ApplicationClient<ApplicationGetPayload<T> | null, null>

    /**
     * Find one Application that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ApplicationFindUniqueOrThrowArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApplicationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApplicationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Application'> extends True ? Prisma__ApplicationClient<ApplicationGetPayload<T>> : Prisma__ApplicationClient<ApplicationGetPayload<T> | null, null>

    /**
     * Find the first Application that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApplicationFindManyArgs>(
      args?: SelectSubset<T, ApplicationFindManyArgs>
    ): Prisma.PrismaPromise<Array<ApplicationGetPayload<T>>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
    **/
    create<T extends ApplicationCreateArgs>(
      args: SelectSubset<T, ApplicationCreateArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Create many Applications.
     *     @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     *     @example
     *     // Create many Applications
     *     const application = await prisma.application.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApplicationCreateManyArgs>(
      args?: SelectSubset<T, ApplicationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
    **/
    delete<T extends ApplicationDeleteArgs>(
      args: SelectSubset<T, ApplicationDeleteArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApplicationUpdateArgs>(
      args: SelectSubset<T, ApplicationUpdateArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApplicationDeleteManyArgs>(
      args?: SelectSubset<T, ApplicationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApplicationUpdateManyArgs>(
      args: SelectSubset<T, ApplicationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
    **/
    upsert<T extends ApplicationUpsertArgs>(
      args: SelectSubset<T, ApplicationUpsertArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApplicationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    loan<T extends LoanArgs= {}>(args?: Subset<T, LoanArgs>): Prisma__LoanClient<LoanGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    statuses<T extends Application$statusesArgs= {}>(args?: Subset<T, Application$statusesArgs>): Prisma.PrismaPromise<Array<StatusGetPayload<T>>| Null>;

    prefr<T extends Application$prefrArgs= {}>(args?: Subset<T, Application$prefrArgs>): Prisma.PrismaPromise<Array<PrefrGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Application base type for findUnique actions
   */
  export type ApplicationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUnique
   */
  export interface ApplicationFindUniqueArgs extends ApplicationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application base type for findFirst actions
   */
  export type ApplicationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }

  /**
   * Application findFirst
   */
  export interface ApplicationFindFirstArgs extends ApplicationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }


  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }


  /**
   * Application create
   */
  export type ApplicationCreateArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }


  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs = {
    /**
     * The data used to create many Applications.
     */
    data: Enumerable<ApplicationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Application update
   */
  export type ApplicationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }


  /**
   * Application delete
   */
  export type ApplicationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application.statuses
   */
  export type Application$statusesArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    where?: StatusWhereInput
    orderBy?: Enumerable<StatusOrderByWithRelationInput>
    cursor?: StatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * Application.prefr
   */
  export type Application$prefrArgs = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    where?: PrefrWhereInput
    orderBy?: Enumerable<PrefrOrderByWithRelationInput>
    cursor?: PrefrWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PrefrScalarFieldEnum>
  }


  /**
   * Application without action
   */
  export type ApplicationArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
  }



  /**
   * Model Status
   */


  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    applicationId: number | null
  }

  export type StatusSumAggregateOutputType = {
    id: number | null
    userId: number | null
    applicationId: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: number | null
    status: string | null
    userId: number | null
    applicationId: number | null
    commissionAdded: boolean | null
    remark: string | null
  }

  export type StatusMaxAggregateOutputType = {
    id: number | null
    status: string | null
    userId: number | null
    applicationId: number | null
    commissionAdded: boolean | null
    remark: string | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    status: number
    userId: number
    applicationId: number
    commissionAdded: number
    remark: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    id?: true
    userId?: true
    applicationId?: true
  }

  export type StatusSumAggregateInputType = {
    id?: true
    userId?: true
    applicationId?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    status?: true
    userId?: true
    applicationId?: true
    commissionAdded?: true
    remark?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    status?: true
    userId?: true
    applicationId?: true
    commissionAdded?: true
    remark?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    status?: true
    userId?: true
    applicationId?: true
    commissionAdded?: true
    remark?: true
    _all?: true
  }

  export type StatusAggregateArgs = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: Enumerable<StatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs = {
    where?: StatusWhereInput
    orderBy?: Enumerable<StatusOrderByWithAggregationInput>
    by: StatusScalarFieldEnum[]
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }


  export type StatusGroupByOutputType = {
    id: number
    status: string
    userId: number
    applicationId: number
    commissionAdded: boolean
    remark: string
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect = {
    id?: boolean
    status?: boolean
    userId?: boolean
    applicationId?: boolean
    commissionAdded?: boolean
    remark?: boolean
    user?: boolean | UserArgs
    application?: boolean | ApplicationArgs
  }


  export type StatusInclude = {
    user?: boolean | UserArgs
    application?: boolean | ApplicationArgs
  }

  export type StatusGetPayload<S extends boolean | null | undefined | StatusArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Status :
    S extends undefined ? never :
    S extends { include: any } & (StatusArgs | StatusFindManyArgs)
    ? Status  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'application' ? ApplicationGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (StatusArgs | StatusFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'application' ? ApplicationGetPayload<S['select'][P]> :  P extends keyof Status ? Status[P] : never
  } 
      : Status


  type StatusCountArgs = 
    Omit<StatusFindManyArgs, 'select' | 'include'> & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StatusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Status'> extends True ? Prisma__StatusClient<StatusGetPayload<T>> : Prisma__StatusClient<StatusGetPayload<T> | null, null>

    /**
     * Find one Status that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StatusFindUniqueOrThrowArgs>
    ): Prisma__StatusClient<StatusGetPayload<T>>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StatusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Status'> extends True ? Prisma__StatusClient<StatusGetPayload<T>> : Prisma__StatusClient<StatusGetPayload<T> | null, null>

    /**
     * Find the first Status that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StatusFindFirstOrThrowArgs>
    ): Prisma__StatusClient<StatusGetPayload<T>>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusFindManyArgs>(
      args?: SelectSubset<T, StatusFindManyArgs>
    ): Prisma.PrismaPromise<Array<StatusGetPayload<T>>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends StatusCreateArgs>(
      args: SelectSubset<T, StatusCreateArgs>
    ): Prisma__StatusClient<StatusGetPayload<T>>

    /**
     * Create many Statuses.
     *     @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     *     @example
     *     // Create many Statuses
     *     const status = await prisma.status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusCreateManyArgs>(
      args?: SelectSubset<T, StatusCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends StatusDeleteArgs>(
      args: SelectSubset<T, StatusDeleteArgs>
    ): Prisma__StatusClient<StatusGetPayload<T>>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusUpdateArgs>(
      args: SelectSubset<T, StatusUpdateArgs>
    ): Prisma__StatusClient<StatusGetPayload<T>>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusDeleteManyArgs>(
      args?: SelectSubset<T, StatusDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusUpdateManyArgs>(
      args: SelectSubset<T, StatusUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends StatusUpsertArgs>(
      args: SelectSubset<T, StatusUpsertArgs>
    ): Prisma__StatusClient<StatusGetPayload<T>>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatusClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    application<T extends ApplicationArgs= {}>(args?: Subset<T, ApplicationArgs>): Prisma__ApplicationClient<ApplicationGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Status base type for findUnique actions
   */
  export type StatusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findUnique
   */
  export interface StatusFindUniqueArgs extends StatusFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status base type for findFirst actions
   */
  export type StatusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: Enumerable<StatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: Enumerable<StatusScalarFieldEnum>
  }

  /**
   * Status findFirst
   */
  export interface StatusFindFirstArgs extends StatusFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: Enumerable<StatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * Status findMany
   */
  export type StatusFindManyArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: Enumerable<StatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * Status create
   */
  export type StatusCreateArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }


  /**
   * Status createMany
   */
  export type StatusCreateManyArgs = {
    /**
     * The data used to create many Statuses.
     */
    data: Enumerable<StatusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Status update
   */
  export type StatusUpdateArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
  }


  /**
   * Status upsert
   */
  export type StatusUpsertArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }


  /**
   * Status delete
   */
  export type StatusDeleteArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
  }


  /**
   * Status without action
   */
  export type StatusArgs = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude | null
  }



  /**
   * Model LoanType
   */


  export type AggregateLoanType = {
    _count: LoanTypeCountAggregateOutputType | null
    _avg: LoanTypeAvgAggregateOutputType | null
    _sum: LoanTypeSumAggregateOutputType | null
    _min: LoanTypeMinAggregateOutputType | null
    _max: LoanTypeMaxAggregateOutputType | null
  }

  export type LoanTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type LoanTypeSumAggregateOutputType = {
    id: number | null
  }

  export type LoanTypeMinAggregateOutputType = {
    id: number | null
    loanName: string | null
  }

  export type LoanTypeMaxAggregateOutputType = {
    id: number | null
    loanName: string | null
  }

  export type LoanTypeCountAggregateOutputType = {
    id: number
    loanName: number
    _all: number
  }


  export type LoanTypeAvgAggregateInputType = {
    id?: true
  }

  export type LoanTypeSumAggregateInputType = {
    id?: true
  }

  export type LoanTypeMinAggregateInputType = {
    id?: true
    loanName?: true
  }

  export type LoanTypeMaxAggregateInputType = {
    id?: true
    loanName?: true
  }

  export type LoanTypeCountAggregateInputType = {
    id?: true
    loanName?: true
    _all?: true
  }

  export type LoanTypeAggregateArgs = {
    /**
     * Filter which LoanType to aggregate.
     */
    where?: LoanTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanTypes to fetch.
     */
    orderBy?: Enumerable<LoanTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoanTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoanTypes
    **/
    _count?: true | LoanTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoanTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoanTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoanTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoanTypeMaxAggregateInputType
  }

  export type GetLoanTypeAggregateType<T extends LoanTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateLoanType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoanType[P]>
      : GetScalarType<T[P], AggregateLoanType[P]>
  }




  export type LoanTypeGroupByArgs = {
    where?: LoanTypeWhereInput
    orderBy?: Enumerable<LoanTypeOrderByWithAggregationInput>
    by: LoanTypeScalarFieldEnum[]
    having?: LoanTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoanTypeCountAggregateInputType | true
    _avg?: LoanTypeAvgAggregateInputType
    _sum?: LoanTypeSumAggregateInputType
    _min?: LoanTypeMinAggregateInputType
    _max?: LoanTypeMaxAggregateInputType
  }


  export type LoanTypeGroupByOutputType = {
    id: number
    loanName: string
    _count: LoanTypeCountAggregateOutputType | null
    _avg: LoanTypeAvgAggregateOutputType | null
    _sum: LoanTypeSumAggregateOutputType | null
    _min: LoanTypeMinAggregateOutputType | null
    _max: LoanTypeMaxAggregateOutputType | null
  }

  type GetLoanTypeGroupByPayload<T extends LoanTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LoanTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoanTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoanTypeGroupByOutputType[P]>
            : GetScalarType<T[P], LoanTypeGroupByOutputType[P]>
        }
      >
    >


  export type LoanTypeSelect = {
    id?: boolean
    loanName?: boolean
    loans?: boolean | LoanType$loansArgs
    _count?: boolean | LoanTypeCountOutputTypeArgs
  }


  export type LoanTypeInclude = {
    loans?: boolean | LoanType$loansArgs
    _count?: boolean | LoanTypeCountOutputTypeArgs
  }

  export type LoanTypeGetPayload<S extends boolean | null | undefined | LoanTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LoanType :
    S extends undefined ? never :
    S extends { include: any } & (LoanTypeArgs | LoanTypeFindManyArgs)
    ? LoanType  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'loans' ? Array < LoanGetPayload<S['include'][P]>>  :
        P extends '_count' ? LoanTypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LoanTypeArgs | LoanTypeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'loans' ? Array < LoanGetPayload<S['select'][P]>>  :
        P extends '_count' ? LoanTypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof LoanType ? LoanType[P] : never
  } 
      : LoanType


  type LoanTypeCountArgs = 
    Omit<LoanTypeFindManyArgs, 'select' | 'include'> & {
      select?: LoanTypeCountAggregateInputType | true
    }

  export interface LoanTypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LoanType that matches the filter.
     * @param {LoanTypeFindUniqueArgs} args - Arguments to find a LoanType
     * @example
     * // Get one LoanType
     * const loanType = await prisma.loanType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoanTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LoanTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LoanType'> extends True ? Prisma__LoanTypeClient<LoanTypeGetPayload<T>> : Prisma__LoanTypeClient<LoanTypeGetPayload<T> | null, null>

    /**
     * Find one LoanType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LoanTypeFindUniqueOrThrowArgs} args - Arguments to find a LoanType
     * @example
     * // Get one LoanType
     * const loanType = await prisma.loanType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LoanTypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LoanTypeFindUniqueOrThrowArgs>
    ): Prisma__LoanTypeClient<LoanTypeGetPayload<T>>

    /**
     * Find the first LoanType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeFindFirstArgs} args - Arguments to find a LoanType
     * @example
     * // Get one LoanType
     * const loanType = await prisma.loanType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoanTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LoanTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LoanType'> extends True ? Prisma__LoanTypeClient<LoanTypeGetPayload<T>> : Prisma__LoanTypeClient<LoanTypeGetPayload<T> | null, null>

    /**
     * Find the first LoanType that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeFindFirstOrThrowArgs} args - Arguments to find a LoanType
     * @example
     * // Get one LoanType
     * const loanType = await prisma.loanType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LoanTypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LoanTypeFindFirstOrThrowArgs>
    ): Prisma__LoanTypeClient<LoanTypeGetPayload<T>>

    /**
     * Find zero or more LoanTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoanTypes
     * const loanTypes = await prisma.loanType.findMany()
     * 
     * // Get first 10 LoanTypes
     * const loanTypes = await prisma.loanType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loanTypeWithIdOnly = await prisma.loanType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoanTypeFindManyArgs>(
      args?: SelectSubset<T, LoanTypeFindManyArgs>
    ): Prisma.PrismaPromise<Array<LoanTypeGetPayload<T>>>

    /**
     * Create a LoanType.
     * @param {LoanTypeCreateArgs} args - Arguments to create a LoanType.
     * @example
     * // Create one LoanType
     * const LoanType = await prisma.loanType.create({
     *   data: {
     *     // ... data to create a LoanType
     *   }
     * })
     * 
    **/
    create<T extends LoanTypeCreateArgs>(
      args: SelectSubset<T, LoanTypeCreateArgs>
    ): Prisma__LoanTypeClient<LoanTypeGetPayload<T>>

    /**
     * Create many LoanTypes.
     *     @param {LoanTypeCreateManyArgs} args - Arguments to create many LoanTypes.
     *     @example
     *     // Create many LoanTypes
     *     const loanType = await prisma.loanType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LoanTypeCreateManyArgs>(
      args?: SelectSubset<T, LoanTypeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LoanType.
     * @param {LoanTypeDeleteArgs} args - Arguments to delete one LoanType.
     * @example
     * // Delete one LoanType
     * const LoanType = await prisma.loanType.delete({
     *   where: {
     *     // ... filter to delete one LoanType
     *   }
     * })
     * 
    **/
    delete<T extends LoanTypeDeleteArgs>(
      args: SelectSubset<T, LoanTypeDeleteArgs>
    ): Prisma__LoanTypeClient<LoanTypeGetPayload<T>>

    /**
     * Update one LoanType.
     * @param {LoanTypeUpdateArgs} args - Arguments to update one LoanType.
     * @example
     * // Update one LoanType
     * const loanType = await prisma.loanType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoanTypeUpdateArgs>(
      args: SelectSubset<T, LoanTypeUpdateArgs>
    ): Prisma__LoanTypeClient<LoanTypeGetPayload<T>>

    /**
     * Delete zero or more LoanTypes.
     * @param {LoanTypeDeleteManyArgs} args - Arguments to filter LoanTypes to delete.
     * @example
     * // Delete a few LoanTypes
     * const { count } = await prisma.loanType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoanTypeDeleteManyArgs>(
      args?: SelectSubset<T, LoanTypeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoanTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoanTypes
     * const loanType = await prisma.loanType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoanTypeUpdateManyArgs>(
      args: SelectSubset<T, LoanTypeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LoanType.
     * @param {LoanTypeUpsertArgs} args - Arguments to update or create a LoanType.
     * @example
     * // Update or create a LoanType
     * const loanType = await prisma.loanType.upsert({
     *   create: {
     *     // ... data to create a LoanType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoanType we want to update
     *   }
     * })
    **/
    upsert<T extends LoanTypeUpsertArgs>(
      args: SelectSubset<T, LoanTypeUpsertArgs>
    ): Prisma__LoanTypeClient<LoanTypeGetPayload<T>>

    /**
     * Count the number of LoanTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeCountArgs} args - Arguments to filter LoanTypes to count.
     * @example
     * // Count the number of LoanTypes
     * const count = await prisma.loanType.count({
     *   where: {
     *     // ... the filter for the LoanTypes we want to count
     *   }
     * })
    **/
    count<T extends LoanTypeCountArgs>(
      args?: Subset<T, LoanTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoanTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoanType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoanTypeAggregateArgs>(args: Subset<T, LoanTypeAggregateArgs>): Prisma.PrismaPromise<GetLoanTypeAggregateType<T>>

    /**
     * Group by LoanType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoanTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoanTypeGroupByArgs['orderBy'] }
        : { orderBy?: LoanTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoanTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoanTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LoanType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LoanTypeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    loans<T extends LoanType$loansArgs= {}>(args?: Subset<T, LoanType$loansArgs>): Prisma.PrismaPromise<Array<LoanGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LoanType base type for findUnique actions
   */
  export type LoanTypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
    /**
     * Filter, which LoanType to fetch.
     */
    where: LoanTypeWhereUniqueInput
  }

  /**
   * LoanType findUnique
   */
  export interface LoanTypeFindUniqueArgs extends LoanTypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LoanType findUniqueOrThrow
   */
  export type LoanTypeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
    /**
     * Filter, which LoanType to fetch.
     */
    where: LoanTypeWhereUniqueInput
  }


  /**
   * LoanType base type for findFirst actions
   */
  export type LoanTypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
    /**
     * Filter, which LoanType to fetch.
     */
    where?: LoanTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanTypes to fetch.
     */
    orderBy?: Enumerable<LoanTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoanTypes.
     */
    cursor?: LoanTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoanTypes.
     */
    distinct?: Enumerable<LoanTypeScalarFieldEnum>
  }

  /**
   * LoanType findFirst
   */
  export interface LoanTypeFindFirstArgs extends LoanTypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LoanType findFirstOrThrow
   */
  export type LoanTypeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
    /**
     * Filter, which LoanType to fetch.
     */
    where?: LoanTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanTypes to fetch.
     */
    orderBy?: Enumerable<LoanTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoanTypes.
     */
    cursor?: LoanTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoanTypes.
     */
    distinct?: Enumerable<LoanTypeScalarFieldEnum>
  }


  /**
   * LoanType findMany
   */
  export type LoanTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
    /**
     * Filter, which LoanTypes to fetch.
     */
    where?: LoanTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoanTypes to fetch.
     */
    orderBy?: Enumerable<LoanTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoanTypes.
     */
    cursor?: LoanTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoanTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoanTypes.
     */
    skip?: number
    distinct?: Enumerable<LoanTypeScalarFieldEnum>
  }


  /**
   * LoanType create
   */
  export type LoanTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
    /**
     * The data needed to create a LoanType.
     */
    data: XOR<LoanTypeCreateInput, LoanTypeUncheckedCreateInput>
  }


  /**
   * LoanType createMany
   */
  export type LoanTypeCreateManyArgs = {
    /**
     * The data used to create many LoanTypes.
     */
    data: Enumerable<LoanTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LoanType update
   */
  export type LoanTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
    /**
     * The data needed to update a LoanType.
     */
    data: XOR<LoanTypeUpdateInput, LoanTypeUncheckedUpdateInput>
    /**
     * Choose, which LoanType to update.
     */
    where: LoanTypeWhereUniqueInput
  }


  /**
   * LoanType updateMany
   */
  export type LoanTypeUpdateManyArgs = {
    /**
     * The data used to update LoanTypes.
     */
    data: XOR<LoanTypeUpdateManyMutationInput, LoanTypeUncheckedUpdateManyInput>
    /**
     * Filter which LoanTypes to update
     */
    where?: LoanTypeWhereInput
  }


  /**
   * LoanType upsert
   */
  export type LoanTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
    /**
     * The filter to search for the LoanType to update in case it exists.
     */
    where: LoanTypeWhereUniqueInput
    /**
     * In case the LoanType found by the `where` argument doesn't exist, create a new LoanType with this data.
     */
    create: XOR<LoanTypeCreateInput, LoanTypeUncheckedCreateInput>
    /**
     * In case the LoanType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoanTypeUpdateInput, LoanTypeUncheckedUpdateInput>
  }


  /**
   * LoanType delete
   */
  export type LoanTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
    /**
     * Filter which LoanType to delete.
     */
    where: LoanTypeWhereUniqueInput
  }


  /**
   * LoanType deleteMany
   */
  export type LoanTypeDeleteManyArgs = {
    /**
     * Filter which LoanTypes to delete
     */
    where?: LoanTypeWhereInput
  }


  /**
   * LoanType.loans
   */
  export type LoanType$loansArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    where?: LoanWhereInput
    orderBy?: Enumerable<LoanOrderByWithRelationInput>
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LoanScalarFieldEnum>
  }


  /**
   * LoanType without action
   */
  export type LoanTypeArgs = {
    /**
     * Select specific fields to fetch from the LoanType
     */
    select?: LoanTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanTypeInclude | null
  }



  /**
   * Model Bank
   */


  export type AggregateBank = {
    _count: BankCountAggregateOutputType | null
    _avg: BankAvgAggregateOutputType | null
    _sum: BankSumAggregateOutputType | null
    _min: BankMinAggregateOutputType | null
    _max: BankMaxAggregateOutputType | null
  }

  export type BankAvgAggregateOutputType = {
    id: number | null
  }

  export type BankSumAggregateOutputType = {
    id: number | null
  }

  export type BankMinAggregateOutputType = {
    id: number | null
    bankName: string | null
  }

  export type BankMaxAggregateOutputType = {
    id: number | null
    bankName: string | null
  }

  export type BankCountAggregateOutputType = {
    id: number
    bankName: number
    _all: number
  }


  export type BankAvgAggregateInputType = {
    id?: true
  }

  export type BankSumAggregateInputType = {
    id?: true
  }

  export type BankMinAggregateInputType = {
    id?: true
    bankName?: true
  }

  export type BankMaxAggregateInputType = {
    id?: true
    bankName?: true
  }

  export type BankCountAggregateInputType = {
    id?: true
    bankName?: true
    _all?: true
  }

  export type BankAggregateArgs = {
    /**
     * Filter which Bank to aggregate.
     */
    where?: BankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banks to fetch.
     */
    orderBy?: Enumerable<BankOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Banks
    **/
    _count?: true | BankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BankMaxAggregateInputType
  }

  export type GetBankAggregateType<T extends BankAggregateArgs> = {
        [P in keyof T & keyof AggregateBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBank[P]>
      : GetScalarType<T[P], AggregateBank[P]>
  }




  export type BankGroupByArgs = {
    where?: BankWhereInput
    orderBy?: Enumerable<BankOrderByWithAggregationInput>
    by: BankScalarFieldEnum[]
    having?: BankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BankCountAggregateInputType | true
    _avg?: BankAvgAggregateInputType
    _sum?: BankSumAggregateInputType
    _min?: BankMinAggregateInputType
    _max?: BankMaxAggregateInputType
  }


  export type BankGroupByOutputType = {
    id: number
    bankName: string
    _count: BankCountAggregateOutputType | null
    _avg: BankAvgAggregateOutputType | null
    _sum: BankSumAggregateOutputType | null
    _min: BankMinAggregateOutputType | null
    _max: BankMaxAggregateOutputType | null
  }

  type GetBankGroupByPayload<T extends BankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BankGroupByOutputType[P]>
            : GetScalarType<T[P], BankGroupByOutputType[P]>
        }
      >
    >


  export type BankSelect = {
    id?: boolean
    bankName?: boolean
    loans?: boolean | Bank$loansArgs
    _count?: boolean | BankCountOutputTypeArgs
  }


  export type BankInclude = {
    loans?: boolean | Bank$loansArgs
    _count?: boolean | BankCountOutputTypeArgs
  }

  export type BankGetPayload<S extends boolean | null | undefined | BankArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Bank :
    S extends undefined ? never :
    S extends { include: any } & (BankArgs | BankFindManyArgs)
    ? Bank  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'loans' ? Array < LoanGetPayload<S['include'][P]>>  :
        P extends '_count' ? BankCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BankArgs | BankFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'loans' ? Array < LoanGetPayload<S['select'][P]>>  :
        P extends '_count' ? BankCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Bank ? Bank[P] : never
  } 
      : Bank


  type BankCountArgs = 
    Omit<BankFindManyArgs, 'select' | 'include'> & {
      select?: BankCountAggregateInputType | true
    }

  export interface BankDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Bank that matches the filter.
     * @param {BankFindUniqueArgs} args - Arguments to find a Bank
     * @example
     * // Get one Bank
     * const bank = await prisma.bank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BankFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BankFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Bank'> extends True ? Prisma__BankClient<BankGetPayload<T>> : Prisma__BankClient<BankGetPayload<T> | null, null>

    /**
     * Find one Bank that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BankFindUniqueOrThrowArgs} args - Arguments to find a Bank
     * @example
     * // Get one Bank
     * const bank = await prisma.bank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BankFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BankFindUniqueOrThrowArgs>
    ): Prisma__BankClient<BankGetPayload<T>>

    /**
     * Find the first Bank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankFindFirstArgs} args - Arguments to find a Bank
     * @example
     * // Get one Bank
     * const bank = await prisma.bank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BankFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BankFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Bank'> extends True ? Prisma__BankClient<BankGetPayload<T>> : Prisma__BankClient<BankGetPayload<T> | null, null>

    /**
     * Find the first Bank that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankFindFirstOrThrowArgs} args - Arguments to find a Bank
     * @example
     * // Get one Bank
     * const bank = await prisma.bank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BankFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BankFindFirstOrThrowArgs>
    ): Prisma__BankClient<BankGetPayload<T>>

    /**
     * Find zero or more Banks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banks
     * const banks = await prisma.bank.findMany()
     * 
     * // Get first 10 Banks
     * const banks = await prisma.bank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bankWithIdOnly = await prisma.bank.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BankFindManyArgs>(
      args?: SelectSubset<T, BankFindManyArgs>
    ): Prisma.PrismaPromise<Array<BankGetPayload<T>>>

    /**
     * Create a Bank.
     * @param {BankCreateArgs} args - Arguments to create a Bank.
     * @example
     * // Create one Bank
     * const Bank = await prisma.bank.create({
     *   data: {
     *     // ... data to create a Bank
     *   }
     * })
     * 
    **/
    create<T extends BankCreateArgs>(
      args: SelectSubset<T, BankCreateArgs>
    ): Prisma__BankClient<BankGetPayload<T>>

    /**
     * Create many Banks.
     *     @param {BankCreateManyArgs} args - Arguments to create many Banks.
     *     @example
     *     // Create many Banks
     *     const bank = await prisma.bank.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BankCreateManyArgs>(
      args?: SelectSubset<T, BankCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bank.
     * @param {BankDeleteArgs} args - Arguments to delete one Bank.
     * @example
     * // Delete one Bank
     * const Bank = await prisma.bank.delete({
     *   where: {
     *     // ... filter to delete one Bank
     *   }
     * })
     * 
    **/
    delete<T extends BankDeleteArgs>(
      args: SelectSubset<T, BankDeleteArgs>
    ): Prisma__BankClient<BankGetPayload<T>>

    /**
     * Update one Bank.
     * @param {BankUpdateArgs} args - Arguments to update one Bank.
     * @example
     * // Update one Bank
     * const bank = await prisma.bank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BankUpdateArgs>(
      args: SelectSubset<T, BankUpdateArgs>
    ): Prisma__BankClient<BankGetPayload<T>>

    /**
     * Delete zero or more Banks.
     * @param {BankDeleteManyArgs} args - Arguments to filter Banks to delete.
     * @example
     * // Delete a few Banks
     * const { count } = await prisma.bank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BankDeleteManyArgs>(
      args?: SelectSubset<T, BankDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banks
     * const bank = await prisma.bank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BankUpdateManyArgs>(
      args: SelectSubset<T, BankUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bank.
     * @param {BankUpsertArgs} args - Arguments to update or create a Bank.
     * @example
     * // Update or create a Bank
     * const bank = await prisma.bank.upsert({
     *   create: {
     *     // ... data to create a Bank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bank we want to update
     *   }
     * })
    **/
    upsert<T extends BankUpsertArgs>(
      args: SelectSubset<T, BankUpsertArgs>
    ): Prisma__BankClient<BankGetPayload<T>>

    /**
     * Count the number of Banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankCountArgs} args - Arguments to filter Banks to count.
     * @example
     * // Count the number of Banks
     * const count = await prisma.bank.count({
     *   where: {
     *     // ... the filter for the Banks we want to count
     *   }
     * })
    **/
    count<T extends BankCountArgs>(
      args?: Subset<T, BankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BankAggregateArgs>(args: Subset<T, BankAggregateArgs>): Prisma.PrismaPromise<GetBankAggregateType<T>>

    /**
     * Group by Bank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BankGroupByArgs['orderBy'] }
        : { orderBy?: BankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Bank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BankClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    loans<T extends Bank$loansArgs= {}>(args?: Subset<T, Bank$loansArgs>): Prisma.PrismaPromise<Array<LoanGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Bank base type for findUnique actions
   */
  export type BankFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
    /**
     * Filter, which Bank to fetch.
     */
    where: BankWhereUniqueInput
  }

  /**
   * Bank findUnique
   */
  export interface BankFindUniqueArgs extends BankFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Bank findUniqueOrThrow
   */
  export type BankFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
    /**
     * Filter, which Bank to fetch.
     */
    where: BankWhereUniqueInput
  }


  /**
   * Bank base type for findFirst actions
   */
  export type BankFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
    /**
     * Filter, which Bank to fetch.
     */
    where?: BankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banks to fetch.
     */
    orderBy?: Enumerable<BankOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Banks.
     */
    cursor?: BankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Banks.
     */
    distinct?: Enumerable<BankScalarFieldEnum>
  }

  /**
   * Bank findFirst
   */
  export interface BankFindFirstArgs extends BankFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Bank findFirstOrThrow
   */
  export type BankFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
    /**
     * Filter, which Bank to fetch.
     */
    where?: BankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banks to fetch.
     */
    orderBy?: Enumerable<BankOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Banks.
     */
    cursor?: BankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Banks.
     */
    distinct?: Enumerable<BankScalarFieldEnum>
  }


  /**
   * Bank findMany
   */
  export type BankFindManyArgs = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
    /**
     * Filter, which Banks to fetch.
     */
    where?: BankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banks to fetch.
     */
    orderBy?: Enumerable<BankOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Banks.
     */
    cursor?: BankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banks.
     */
    skip?: number
    distinct?: Enumerable<BankScalarFieldEnum>
  }


  /**
   * Bank create
   */
  export type BankCreateArgs = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
    /**
     * The data needed to create a Bank.
     */
    data: XOR<BankCreateInput, BankUncheckedCreateInput>
  }


  /**
   * Bank createMany
   */
  export type BankCreateManyArgs = {
    /**
     * The data used to create many Banks.
     */
    data: Enumerable<BankCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Bank update
   */
  export type BankUpdateArgs = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
    /**
     * The data needed to update a Bank.
     */
    data: XOR<BankUpdateInput, BankUncheckedUpdateInput>
    /**
     * Choose, which Bank to update.
     */
    where: BankWhereUniqueInput
  }


  /**
   * Bank updateMany
   */
  export type BankUpdateManyArgs = {
    /**
     * The data used to update Banks.
     */
    data: XOR<BankUpdateManyMutationInput, BankUncheckedUpdateManyInput>
    /**
     * Filter which Banks to update
     */
    where?: BankWhereInput
  }


  /**
   * Bank upsert
   */
  export type BankUpsertArgs = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
    /**
     * The filter to search for the Bank to update in case it exists.
     */
    where: BankWhereUniqueInput
    /**
     * In case the Bank found by the `where` argument doesn't exist, create a new Bank with this data.
     */
    create: XOR<BankCreateInput, BankUncheckedCreateInput>
    /**
     * In case the Bank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BankUpdateInput, BankUncheckedUpdateInput>
  }


  /**
   * Bank delete
   */
  export type BankDeleteArgs = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
    /**
     * Filter which Bank to delete.
     */
    where: BankWhereUniqueInput
  }


  /**
   * Bank deleteMany
   */
  export type BankDeleteManyArgs = {
    /**
     * Filter which Banks to delete
     */
    where?: BankWhereInput
  }


  /**
   * Bank.loans
   */
  export type Bank$loansArgs = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoanInclude | null
    where?: LoanWhereInput
    orderBy?: Enumerable<LoanOrderByWithRelationInput>
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LoanScalarFieldEnum>
  }


  /**
   * Bank without action
   */
  export type BankArgs = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankInclude | null
  }



  /**
   * Model Dsa
   */


  export type AggregateDsa = {
    _count: DsaCountAggregateOutputType | null
    _avg: DsaAvgAggregateOutputType | null
    _sum: DsaSumAggregateOutputType | null
    _min: DsaMinAggregateOutputType | null
    _max: DsaMaxAggregateOutputType | null
  }

  export type DsaAvgAggregateOutputType = {
    dsaId: number | null
    totalCommission: number | null
    commissionRemaining: number | null
    amountLoan: number | null
    loansIssued: number | null
    commissionPercentage: number | null
  }

  export type DsaSumAggregateOutputType = {
    dsaId: number | null
    totalCommission: number | null
    commissionRemaining: number | null
    amountLoan: number | null
    loansIssued: number | null
    commissionPercentage: number | null
  }

  export type DsaMinAggregateOutputType = {
    dsaId: number | null
    totalCommission: number | null
    commissionRemaining: number | null
    amountLoan: number | null
    loansIssued: number | null
    commissionPercentage: number | null
  }

  export type DsaMaxAggregateOutputType = {
    dsaId: number | null
    totalCommission: number | null
    commissionRemaining: number | null
    amountLoan: number | null
    loansIssued: number | null
    commissionPercentage: number | null
  }

  export type DsaCountAggregateOutputType = {
    dsaId: number
    totalCommission: number
    commissionRemaining: number
    amountLoan: number
    loansIssued: number
    commissionPercentage: number
    _all: number
  }


  export type DsaAvgAggregateInputType = {
    dsaId?: true
    totalCommission?: true
    commissionRemaining?: true
    amountLoan?: true
    loansIssued?: true
    commissionPercentage?: true
  }

  export type DsaSumAggregateInputType = {
    dsaId?: true
    totalCommission?: true
    commissionRemaining?: true
    amountLoan?: true
    loansIssued?: true
    commissionPercentage?: true
  }

  export type DsaMinAggregateInputType = {
    dsaId?: true
    totalCommission?: true
    commissionRemaining?: true
    amountLoan?: true
    loansIssued?: true
    commissionPercentage?: true
  }

  export type DsaMaxAggregateInputType = {
    dsaId?: true
    totalCommission?: true
    commissionRemaining?: true
    amountLoan?: true
    loansIssued?: true
    commissionPercentage?: true
  }

  export type DsaCountAggregateInputType = {
    dsaId?: true
    totalCommission?: true
    commissionRemaining?: true
    amountLoan?: true
    loansIssued?: true
    commissionPercentage?: true
    _all?: true
  }

  export type DsaAggregateArgs = {
    /**
     * Filter which Dsa to aggregate.
     */
    where?: DsaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dsas to fetch.
     */
    orderBy?: Enumerable<DsaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DsaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dsas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dsas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dsas
    **/
    _count?: true | DsaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DsaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DsaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DsaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DsaMaxAggregateInputType
  }

  export type GetDsaAggregateType<T extends DsaAggregateArgs> = {
        [P in keyof T & keyof AggregateDsa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDsa[P]>
      : GetScalarType<T[P], AggregateDsa[P]>
  }




  export type DsaGroupByArgs = {
    where?: DsaWhereInput
    orderBy?: Enumerable<DsaOrderByWithAggregationInput>
    by: DsaScalarFieldEnum[]
    having?: DsaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DsaCountAggregateInputType | true
    _avg?: DsaAvgAggregateInputType
    _sum?: DsaSumAggregateInputType
    _min?: DsaMinAggregateInputType
    _max?: DsaMaxAggregateInputType
  }


  export type DsaGroupByOutputType = {
    dsaId: number
    totalCommission: number
    commissionRemaining: number
    amountLoan: number
    loansIssued: number
    commissionPercentage: number
    _count: DsaCountAggregateOutputType | null
    _avg: DsaAvgAggregateOutputType | null
    _sum: DsaSumAggregateOutputType | null
    _min: DsaMinAggregateOutputType | null
    _max: DsaMaxAggregateOutputType | null
  }

  type GetDsaGroupByPayload<T extends DsaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DsaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DsaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DsaGroupByOutputType[P]>
            : GetScalarType<T[P], DsaGroupByOutputType[P]>
        }
      >
    >


  export type DsaSelect = {
    dsaId?: boolean
    totalCommission?: boolean
    commissionRemaining?: boolean
    amountLoan?: boolean
    loansIssued?: boolean
    commissionPercentage?: boolean
    user?: boolean | UserArgs
  }


  export type DsaInclude = {
    user?: boolean | UserArgs
  }

  export type DsaGetPayload<S extends boolean | null | undefined | DsaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Dsa :
    S extends undefined ? never :
    S extends { include: any } & (DsaArgs | DsaFindManyArgs)
    ? Dsa  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DsaArgs | DsaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Dsa ? Dsa[P] : never
  } 
      : Dsa


  type DsaCountArgs = 
    Omit<DsaFindManyArgs, 'select' | 'include'> & {
      select?: DsaCountAggregateInputType | true
    }

  export interface DsaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Dsa that matches the filter.
     * @param {DsaFindUniqueArgs} args - Arguments to find a Dsa
     * @example
     * // Get one Dsa
     * const dsa = await prisma.dsa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DsaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DsaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Dsa'> extends True ? Prisma__DsaClient<DsaGetPayload<T>> : Prisma__DsaClient<DsaGetPayload<T> | null, null>

    /**
     * Find one Dsa that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DsaFindUniqueOrThrowArgs} args - Arguments to find a Dsa
     * @example
     * // Get one Dsa
     * const dsa = await prisma.dsa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DsaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DsaFindUniqueOrThrowArgs>
    ): Prisma__DsaClient<DsaGetPayload<T>>

    /**
     * Find the first Dsa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DsaFindFirstArgs} args - Arguments to find a Dsa
     * @example
     * // Get one Dsa
     * const dsa = await prisma.dsa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DsaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DsaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Dsa'> extends True ? Prisma__DsaClient<DsaGetPayload<T>> : Prisma__DsaClient<DsaGetPayload<T> | null, null>

    /**
     * Find the first Dsa that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DsaFindFirstOrThrowArgs} args - Arguments to find a Dsa
     * @example
     * // Get one Dsa
     * const dsa = await prisma.dsa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DsaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DsaFindFirstOrThrowArgs>
    ): Prisma__DsaClient<DsaGetPayload<T>>

    /**
     * Find zero or more Dsas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DsaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dsas
     * const dsas = await prisma.dsa.findMany()
     * 
     * // Get first 10 Dsas
     * const dsas = await prisma.dsa.findMany({ take: 10 })
     * 
     * // Only select the `dsaId`
     * const dsaWithDsaIdOnly = await prisma.dsa.findMany({ select: { dsaId: true } })
     * 
    **/
    findMany<T extends DsaFindManyArgs>(
      args?: SelectSubset<T, DsaFindManyArgs>
    ): Prisma.PrismaPromise<Array<DsaGetPayload<T>>>

    /**
     * Create a Dsa.
     * @param {DsaCreateArgs} args - Arguments to create a Dsa.
     * @example
     * // Create one Dsa
     * const Dsa = await prisma.dsa.create({
     *   data: {
     *     // ... data to create a Dsa
     *   }
     * })
     * 
    **/
    create<T extends DsaCreateArgs>(
      args: SelectSubset<T, DsaCreateArgs>
    ): Prisma__DsaClient<DsaGetPayload<T>>

    /**
     * Create many Dsas.
     *     @param {DsaCreateManyArgs} args - Arguments to create many Dsas.
     *     @example
     *     // Create many Dsas
     *     const dsa = await prisma.dsa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DsaCreateManyArgs>(
      args?: SelectSubset<T, DsaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dsa.
     * @param {DsaDeleteArgs} args - Arguments to delete one Dsa.
     * @example
     * // Delete one Dsa
     * const Dsa = await prisma.dsa.delete({
     *   where: {
     *     // ... filter to delete one Dsa
     *   }
     * })
     * 
    **/
    delete<T extends DsaDeleteArgs>(
      args: SelectSubset<T, DsaDeleteArgs>
    ): Prisma__DsaClient<DsaGetPayload<T>>

    /**
     * Update one Dsa.
     * @param {DsaUpdateArgs} args - Arguments to update one Dsa.
     * @example
     * // Update one Dsa
     * const dsa = await prisma.dsa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DsaUpdateArgs>(
      args: SelectSubset<T, DsaUpdateArgs>
    ): Prisma__DsaClient<DsaGetPayload<T>>

    /**
     * Delete zero or more Dsas.
     * @param {DsaDeleteManyArgs} args - Arguments to filter Dsas to delete.
     * @example
     * // Delete a few Dsas
     * const { count } = await prisma.dsa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DsaDeleteManyArgs>(
      args?: SelectSubset<T, DsaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dsas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DsaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dsas
     * const dsa = await prisma.dsa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DsaUpdateManyArgs>(
      args: SelectSubset<T, DsaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dsa.
     * @param {DsaUpsertArgs} args - Arguments to update or create a Dsa.
     * @example
     * // Update or create a Dsa
     * const dsa = await prisma.dsa.upsert({
     *   create: {
     *     // ... data to create a Dsa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dsa we want to update
     *   }
     * })
    **/
    upsert<T extends DsaUpsertArgs>(
      args: SelectSubset<T, DsaUpsertArgs>
    ): Prisma__DsaClient<DsaGetPayload<T>>

    /**
     * Count the number of Dsas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DsaCountArgs} args - Arguments to filter Dsas to count.
     * @example
     * // Count the number of Dsas
     * const count = await prisma.dsa.count({
     *   where: {
     *     // ... the filter for the Dsas we want to count
     *   }
     * })
    **/
    count<T extends DsaCountArgs>(
      args?: Subset<T, DsaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DsaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dsa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DsaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DsaAggregateArgs>(args: Subset<T, DsaAggregateArgs>): Prisma.PrismaPromise<GetDsaAggregateType<T>>

    /**
     * Group by Dsa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DsaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DsaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DsaGroupByArgs['orderBy'] }
        : { orderBy?: DsaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DsaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDsaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Dsa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DsaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Dsa base type for findUnique actions
   */
  export type DsaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    /**
     * Filter, which Dsa to fetch.
     */
    where: DsaWhereUniqueInput
  }

  /**
   * Dsa findUnique
   */
  export interface DsaFindUniqueArgs extends DsaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Dsa findUniqueOrThrow
   */
  export type DsaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    /**
     * Filter, which Dsa to fetch.
     */
    where: DsaWhereUniqueInput
  }


  /**
   * Dsa base type for findFirst actions
   */
  export type DsaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    /**
     * Filter, which Dsa to fetch.
     */
    where?: DsaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dsas to fetch.
     */
    orderBy?: Enumerable<DsaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dsas.
     */
    cursor?: DsaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dsas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dsas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dsas.
     */
    distinct?: Enumerable<DsaScalarFieldEnum>
  }

  /**
   * Dsa findFirst
   */
  export interface DsaFindFirstArgs extends DsaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Dsa findFirstOrThrow
   */
  export type DsaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    /**
     * Filter, which Dsa to fetch.
     */
    where?: DsaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dsas to fetch.
     */
    orderBy?: Enumerable<DsaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dsas.
     */
    cursor?: DsaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dsas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dsas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dsas.
     */
    distinct?: Enumerable<DsaScalarFieldEnum>
  }


  /**
   * Dsa findMany
   */
  export type DsaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    /**
     * Filter, which Dsas to fetch.
     */
    where?: DsaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dsas to fetch.
     */
    orderBy?: Enumerable<DsaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dsas.
     */
    cursor?: DsaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dsas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dsas.
     */
    skip?: number
    distinct?: Enumerable<DsaScalarFieldEnum>
  }


  /**
   * Dsa create
   */
  export type DsaCreateArgs = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    /**
     * The data needed to create a Dsa.
     */
    data: XOR<DsaCreateInput, DsaUncheckedCreateInput>
  }


  /**
   * Dsa createMany
   */
  export type DsaCreateManyArgs = {
    /**
     * The data used to create many Dsas.
     */
    data: Enumerable<DsaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Dsa update
   */
  export type DsaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    /**
     * The data needed to update a Dsa.
     */
    data: XOR<DsaUpdateInput, DsaUncheckedUpdateInput>
    /**
     * Choose, which Dsa to update.
     */
    where: DsaWhereUniqueInput
  }


  /**
   * Dsa updateMany
   */
  export type DsaUpdateManyArgs = {
    /**
     * The data used to update Dsas.
     */
    data: XOR<DsaUpdateManyMutationInput, DsaUncheckedUpdateManyInput>
    /**
     * Filter which Dsas to update
     */
    where?: DsaWhereInput
  }


  /**
   * Dsa upsert
   */
  export type DsaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    /**
     * The filter to search for the Dsa to update in case it exists.
     */
    where: DsaWhereUniqueInput
    /**
     * In case the Dsa found by the `where` argument doesn't exist, create a new Dsa with this data.
     */
    create: XOR<DsaCreateInput, DsaUncheckedCreateInput>
    /**
     * In case the Dsa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DsaUpdateInput, DsaUncheckedUpdateInput>
  }


  /**
   * Dsa delete
   */
  export type DsaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
    /**
     * Filter which Dsa to delete.
     */
    where: DsaWhereUniqueInput
  }


  /**
   * Dsa deleteMany
   */
  export type DsaDeleteManyArgs = {
    /**
     * Filter which Dsas to delete
     */
    where?: DsaWhereInput
  }


  /**
   * Dsa without action
   */
  export type DsaArgs = {
    /**
     * Select specific fields to fetch from the Dsa
     */
    select?: DsaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DsaInclude | null
  }



  /**
   * Model Admin
   */


  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    adminId: number | null
  }

  export type AdminSumAggregateOutputType = {
    adminId: number | null
  }

  export type AdminMinAggregateOutputType = {
    adminId: number | null
    adminUsername: string | null
    adminEmail: string | null
    adminPassword: string | null
  }

  export type AdminMaxAggregateOutputType = {
    adminId: number | null
    adminUsername: string | null
    adminEmail: string | null
    adminPassword: string | null
  }

  export type AdminCountAggregateOutputType = {
    adminId: number
    adminUsername: number
    adminEmail: number
    adminPassword: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    adminId?: true
  }

  export type AdminSumAggregateInputType = {
    adminId?: true
  }

  export type AdminMinAggregateInputType = {
    adminId?: true
    adminUsername?: true
    adminEmail?: true
    adminPassword?: true
  }

  export type AdminMaxAggregateInputType = {
    adminId?: true
    adminUsername?: true
    adminEmail?: true
    adminPassword?: true
  }

  export type AdminCountAggregateInputType = {
    adminId?: true
    adminUsername?: true
    adminEmail?: true
    adminPassword?: true
    _all?: true
  }

  export type AdminAggregateArgs = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs = {
    where?: AdminWhereInput
    orderBy?: Enumerable<AdminOrderByWithAggregationInput>
    by: AdminScalarFieldEnum[]
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }


  export type AdminGroupByOutputType = {
    adminId: number
    adminUsername: string
    adminEmail: string
    adminPassword: string
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect = {
    adminId?: boolean
    adminUsername?: boolean
    adminEmail?: boolean
    adminPassword?: boolean
  }


  export type AdminGetPayload<S extends boolean | null | undefined | AdminArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Admin :
    S extends undefined ? never :
    S extends { include: any } & (AdminArgs | AdminFindManyArgs)
    ? Admin 
    : S extends { select: any } & (AdminArgs | AdminFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Admin ? Admin[P] : never
  } 
      : Admin


  type AdminCountArgs = 
    Omit<AdminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Admin'> extends True ? Prisma__AdminClient<AdminGetPayload<T>> : Prisma__AdminClient<AdminGetPayload<T> | null, null>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Admin'> extends True ? Prisma__AdminClient<AdminGetPayload<T>> : Prisma__AdminClient<AdminGetPayload<T> | null, null>

    /**
     * Find the first Admin that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `adminId`
     * const adminWithAdminIdOnly = await prisma.admin.findMany({ select: { adminId: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs>(
      args?: SelectSubset<T, AdminFindManyArgs>
    ): Prisma.PrismaPromise<Array<AdminGetPayload<T>>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs>(
      args: SelectSubset<T, AdminCreateArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs>(
      args?: SelectSubset<T, AdminCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs>(
      args: SelectSubset<T, AdminDeleteArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs>(
      args: SelectSubset<T, AdminUpdateArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs>(
      args?: SelectSubset<T, AdminDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs>(
      args: SelectSubset<T, AdminUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs>(
      args: SelectSubset<T, AdminUpsertArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdminClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Admin base type for findUnique actions
   */
  export type AdminFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUnique
   */
  export interface AdminFindUniqueArgs extends AdminFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin base type for findFirst actions
   */
  export type AdminFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: Enumerable<AdminScalarFieldEnum>
  }

  /**
   * Admin findFirst
   */
  export interface AdminFindFirstArgs extends AdminFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin findMany
   */
  export type AdminFindManyArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs = {
    /**
     * The data used to create many Admins.
     */
    data: Enumerable<AdminCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }


  /**
   * Admin without action
   */
  export type AdminArgs = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect | null
  }



  /**
   * Model Prefr
   */


  export type AggregatePrefr = {
    _count: PrefrCountAggregateOutputType | null
    _avg: PrefrAvgAggregateOutputType | null
    _sum: PrefrSumAggregateOutputType | null
    _min: PrefrMinAggregateOutputType | null
    _max: PrefrMaxAggregateOutputType | null
  }

  export type PrefrAvgAggregateOutputType = {
    applicationId: number | null
  }

  export type PrefrSumAggregateOutputType = {
    applicationId: number | null
  }

  export type PrefrMinAggregateOutputType = {
    applicationId: number | null
    loanId: string | null
  }

  export type PrefrMaxAggregateOutputType = {
    applicationId: number | null
    loanId: string | null
  }

  export type PrefrCountAggregateOutputType = {
    applicationId: number
    loanId: number
    _all: number
  }


  export type PrefrAvgAggregateInputType = {
    applicationId?: true
  }

  export type PrefrSumAggregateInputType = {
    applicationId?: true
  }

  export type PrefrMinAggregateInputType = {
    applicationId?: true
    loanId?: true
  }

  export type PrefrMaxAggregateInputType = {
    applicationId?: true
    loanId?: true
  }

  export type PrefrCountAggregateInputType = {
    applicationId?: true
    loanId?: true
    _all?: true
  }

  export type PrefrAggregateArgs = {
    /**
     * Filter which Prefr to aggregate.
     */
    where?: PrefrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prefrs to fetch.
     */
    orderBy?: Enumerable<PrefrOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrefrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prefrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prefrs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prefrs
    **/
    _count?: true | PrefrCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrefrAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrefrSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrefrMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrefrMaxAggregateInputType
  }

  export type GetPrefrAggregateType<T extends PrefrAggregateArgs> = {
        [P in keyof T & keyof AggregatePrefr]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrefr[P]>
      : GetScalarType<T[P], AggregatePrefr[P]>
  }




  export type PrefrGroupByArgs = {
    where?: PrefrWhereInput
    orderBy?: Enumerable<PrefrOrderByWithAggregationInput>
    by: PrefrScalarFieldEnum[]
    having?: PrefrScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrefrCountAggregateInputType | true
    _avg?: PrefrAvgAggregateInputType
    _sum?: PrefrSumAggregateInputType
    _min?: PrefrMinAggregateInputType
    _max?: PrefrMaxAggregateInputType
  }


  export type PrefrGroupByOutputType = {
    applicationId: number
    loanId: string
    _count: PrefrCountAggregateOutputType | null
    _avg: PrefrAvgAggregateOutputType | null
    _sum: PrefrSumAggregateOutputType | null
    _min: PrefrMinAggregateOutputType | null
    _max: PrefrMaxAggregateOutputType | null
  }

  type GetPrefrGroupByPayload<T extends PrefrGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PrefrGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrefrGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrefrGroupByOutputType[P]>
            : GetScalarType<T[P], PrefrGroupByOutputType[P]>
        }
      >
    >


  export type PrefrSelect = {
    applicationId?: boolean
    loanId?: boolean
    application?: boolean | ApplicationArgs
  }


  export type PrefrInclude = {
    application?: boolean | ApplicationArgs
  }

  export type PrefrGetPayload<S extends boolean | null | undefined | PrefrArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Prefr :
    S extends undefined ? never :
    S extends { include: any } & (PrefrArgs | PrefrFindManyArgs)
    ? Prefr  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'application' ? ApplicationGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PrefrArgs | PrefrFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'application' ? ApplicationGetPayload<S['select'][P]> :  P extends keyof Prefr ? Prefr[P] : never
  } 
      : Prefr


  type PrefrCountArgs = 
    Omit<PrefrFindManyArgs, 'select' | 'include'> & {
      select?: PrefrCountAggregateInputType | true
    }

  export interface PrefrDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Prefr that matches the filter.
     * @param {PrefrFindUniqueArgs} args - Arguments to find a Prefr
     * @example
     * // Get one Prefr
     * const prefr = await prisma.prefr.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PrefrFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PrefrFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Prefr'> extends True ? Prisma__PrefrClient<PrefrGetPayload<T>> : Prisma__PrefrClient<PrefrGetPayload<T> | null, null>

    /**
     * Find one Prefr that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PrefrFindUniqueOrThrowArgs} args - Arguments to find a Prefr
     * @example
     * // Get one Prefr
     * const prefr = await prisma.prefr.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PrefrFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PrefrFindUniqueOrThrowArgs>
    ): Prisma__PrefrClient<PrefrGetPayload<T>>

    /**
     * Find the first Prefr that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrefrFindFirstArgs} args - Arguments to find a Prefr
     * @example
     * // Get one Prefr
     * const prefr = await prisma.prefr.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PrefrFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PrefrFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Prefr'> extends True ? Prisma__PrefrClient<PrefrGetPayload<T>> : Prisma__PrefrClient<PrefrGetPayload<T> | null, null>

    /**
     * Find the first Prefr that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrefrFindFirstOrThrowArgs} args - Arguments to find a Prefr
     * @example
     * // Get one Prefr
     * const prefr = await prisma.prefr.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PrefrFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PrefrFindFirstOrThrowArgs>
    ): Prisma__PrefrClient<PrefrGetPayload<T>>

    /**
     * Find zero or more Prefrs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrefrFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prefrs
     * const prefrs = await prisma.prefr.findMany()
     * 
     * // Get first 10 Prefrs
     * const prefrs = await prisma.prefr.findMany({ take: 10 })
     * 
     * // Only select the `applicationId`
     * const prefrWithApplicationIdOnly = await prisma.prefr.findMany({ select: { applicationId: true } })
     * 
    **/
    findMany<T extends PrefrFindManyArgs>(
      args?: SelectSubset<T, PrefrFindManyArgs>
    ): Prisma.PrismaPromise<Array<PrefrGetPayload<T>>>

    /**
     * Create a Prefr.
     * @param {PrefrCreateArgs} args - Arguments to create a Prefr.
     * @example
     * // Create one Prefr
     * const Prefr = await prisma.prefr.create({
     *   data: {
     *     // ... data to create a Prefr
     *   }
     * })
     * 
    **/
    create<T extends PrefrCreateArgs>(
      args: SelectSubset<T, PrefrCreateArgs>
    ): Prisma__PrefrClient<PrefrGetPayload<T>>

    /**
     * Create many Prefrs.
     *     @param {PrefrCreateManyArgs} args - Arguments to create many Prefrs.
     *     @example
     *     // Create many Prefrs
     *     const prefr = await prisma.prefr.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PrefrCreateManyArgs>(
      args?: SelectSubset<T, PrefrCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Prefr.
     * @param {PrefrDeleteArgs} args - Arguments to delete one Prefr.
     * @example
     * // Delete one Prefr
     * const Prefr = await prisma.prefr.delete({
     *   where: {
     *     // ... filter to delete one Prefr
     *   }
     * })
     * 
    **/
    delete<T extends PrefrDeleteArgs>(
      args: SelectSubset<T, PrefrDeleteArgs>
    ): Prisma__PrefrClient<PrefrGetPayload<T>>

    /**
     * Update one Prefr.
     * @param {PrefrUpdateArgs} args - Arguments to update one Prefr.
     * @example
     * // Update one Prefr
     * const prefr = await prisma.prefr.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PrefrUpdateArgs>(
      args: SelectSubset<T, PrefrUpdateArgs>
    ): Prisma__PrefrClient<PrefrGetPayload<T>>

    /**
     * Delete zero or more Prefrs.
     * @param {PrefrDeleteManyArgs} args - Arguments to filter Prefrs to delete.
     * @example
     * // Delete a few Prefrs
     * const { count } = await prisma.prefr.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PrefrDeleteManyArgs>(
      args?: SelectSubset<T, PrefrDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prefrs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrefrUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prefrs
     * const prefr = await prisma.prefr.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PrefrUpdateManyArgs>(
      args: SelectSubset<T, PrefrUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prefr.
     * @param {PrefrUpsertArgs} args - Arguments to update or create a Prefr.
     * @example
     * // Update or create a Prefr
     * const prefr = await prisma.prefr.upsert({
     *   create: {
     *     // ... data to create a Prefr
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prefr we want to update
     *   }
     * })
    **/
    upsert<T extends PrefrUpsertArgs>(
      args: SelectSubset<T, PrefrUpsertArgs>
    ): Prisma__PrefrClient<PrefrGetPayload<T>>

    /**
     * Count the number of Prefrs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrefrCountArgs} args - Arguments to filter Prefrs to count.
     * @example
     * // Count the number of Prefrs
     * const count = await prisma.prefr.count({
     *   where: {
     *     // ... the filter for the Prefrs we want to count
     *   }
     * })
    **/
    count<T extends PrefrCountArgs>(
      args?: Subset<T, PrefrCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrefrCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prefr.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrefrAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrefrAggregateArgs>(args: Subset<T, PrefrAggregateArgs>): Prisma.PrismaPromise<GetPrefrAggregateType<T>>

    /**
     * Group by Prefr.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrefrGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrefrGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrefrGroupByArgs['orderBy'] }
        : { orderBy?: PrefrGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrefrGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrefrGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Prefr.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PrefrClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    application<T extends ApplicationArgs= {}>(args?: Subset<T, ApplicationArgs>): Prisma__ApplicationClient<ApplicationGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Prefr base type for findUnique actions
   */
  export type PrefrFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    /**
     * Filter, which Prefr to fetch.
     */
    where: PrefrWhereUniqueInput
  }

  /**
   * Prefr findUnique
   */
  export interface PrefrFindUniqueArgs extends PrefrFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Prefr findUniqueOrThrow
   */
  export type PrefrFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    /**
     * Filter, which Prefr to fetch.
     */
    where: PrefrWhereUniqueInput
  }


  /**
   * Prefr base type for findFirst actions
   */
  export type PrefrFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    /**
     * Filter, which Prefr to fetch.
     */
    where?: PrefrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prefrs to fetch.
     */
    orderBy?: Enumerable<PrefrOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prefrs.
     */
    cursor?: PrefrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prefrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prefrs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prefrs.
     */
    distinct?: Enumerable<PrefrScalarFieldEnum>
  }

  /**
   * Prefr findFirst
   */
  export interface PrefrFindFirstArgs extends PrefrFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Prefr findFirstOrThrow
   */
  export type PrefrFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    /**
     * Filter, which Prefr to fetch.
     */
    where?: PrefrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prefrs to fetch.
     */
    orderBy?: Enumerable<PrefrOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prefrs.
     */
    cursor?: PrefrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prefrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prefrs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prefrs.
     */
    distinct?: Enumerable<PrefrScalarFieldEnum>
  }


  /**
   * Prefr findMany
   */
  export type PrefrFindManyArgs = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    /**
     * Filter, which Prefrs to fetch.
     */
    where?: PrefrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prefrs to fetch.
     */
    orderBy?: Enumerable<PrefrOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prefrs.
     */
    cursor?: PrefrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prefrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prefrs.
     */
    skip?: number
    distinct?: Enumerable<PrefrScalarFieldEnum>
  }


  /**
   * Prefr create
   */
  export type PrefrCreateArgs = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    /**
     * The data needed to create a Prefr.
     */
    data: XOR<PrefrCreateInput, PrefrUncheckedCreateInput>
  }


  /**
   * Prefr createMany
   */
  export type PrefrCreateManyArgs = {
    /**
     * The data used to create many Prefrs.
     */
    data: Enumerable<PrefrCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Prefr update
   */
  export type PrefrUpdateArgs = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    /**
     * The data needed to update a Prefr.
     */
    data: XOR<PrefrUpdateInput, PrefrUncheckedUpdateInput>
    /**
     * Choose, which Prefr to update.
     */
    where: PrefrWhereUniqueInput
  }


  /**
   * Prefr updateMany
   */
  export type PrefrUpdateManyArgs = {
    /**
     * The data used to update Prefrs.
     */
    data: XOR<PrefrUpdateManyMutationInput, PrefrUncheckedUpdateManyInput>
    /**
     * Filter which Prefrs to update
     */
    where?: PrefrWhereInput
  }


  /**
   * Prefr upsert
   */
  export type PrefrUpsertArgs = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    /**
     * The filter to search for the Prefr to update in case it exists.
     */
    where: PrefrWhereUniqueInput
    /**
     * In case the Prefr found by the `where` argument doesn't exist, create a new Prefr with this data.
     */
    create: XOR<PrefrCreateInput, PrefrUncheckedCreateInput>
    /**
     * In case the Prefr was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrefrUpdateInput, PrefrUncheckedUpdateInput>
  }


  /**
   * Prefr delete
   */
  export type PrefrDeleteArgs = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
    /**
     * Filter which Prefr to delete.
     */
    where: PrefrWhereUniqueInput
  }


  /**
   * Prefr deleteMany
   */
  export type PrefrDeleteManyArgs = {
    /**
     * Filter which Prefrs to delete
     */
    where?: PrefrWhereInput
  }


  /**
   * Prefr without action
   */
  export type PrefrArgs = {
    /**
     * Select specific fields to fetch from the Prefr
     */
    select?: PrefrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrefrInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AdminScalarFieldEnum: {
    adminId: 'adminId',
    adminUsername: 'adminUsername',
    adminEmail: 'adminEmail',
    adminPassword: 'adminPassword'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    applicationName: 'applicationName',
    applicationGovId: 'applicationGovId',
    amount: 'amount',
    loanId: 'loanId',
    monthly_income: 'monthly_income',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const BankScalarFieldEnum: {
    id: 'id',
    bankName: 'bankName'
  };

  export type BankScalarFieldEnum = (typeof BankScalarFieldEnum)[keyof typeof BankScalarFieldEnum]


  export const DsaScalarFieldEnum: {
    dsaId: 'dsaId',
    totalCommission: 'totalCommission',
    commissionRemaining: 'commissionRemaining',
    amountLoan: 'amountLoan',
    loansIssued: 'loansIssued',
    commissionPercentage: 'commissionPercentage'
  };

  export type DsaScalarFieldEnum = (typeof DsaScalarFieldEnum)[keyof typeof DsaScalarFieldEnum]


  export const LoanScalarFieldEnum: {
    id: 'id',
    typeId: 'typeId',
    bankId: 'bankId',
    interest: 'interest',
    commission: 'commission'
  };

  export type LoanScalarFieldEnum = (typeof LoanScalarFieldEnum)[keyof typeof LoanScalarFieldEnum]


  export const LoanTypeScalarFieldEnum: {
    id: 'id',
    loanName: 'loanName'
  };

  export type LoanTypeScalarFieldEnum = (typeof LoanTypeScalarFieldEnum)[keyof typeof LoanTypeScalarFieldEnum]


  export const PrefrScalarFieldEnum: {
    applicationId: 'applicationId',
    loanId: 'loanId'
  };

  export type PrefrScalarFieldEnum = (typeof PrefrScalarFieldEnum)[keyof typeof PrefrScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StatusScalarFieldEnum: {
    id: 'id',
    status: 'status',
    userId: 'userId',
    applicationId: 'applicationId',
    commissionAdded: 'commissionAdded',
    remark: 'remark'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    role: 'role',
    phoneNumber: 'phoneNumber',
    name: 'name',
    city: 'city',
    pincode: 'pincode',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    role?: StringFilter | string
    phoneNumber?: StringFilter | string
    name?: StringFilter | string
    city?: StringFilter | string
    pincode?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    applications?: ApplicationListRelationFilter
    statuses?: StatusListRelationFilter
    dsa?: DsaListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phoneNumber?: SortOrder
    name?: SortOrder
    city?: SortOrder
    pincode?: SortOrder
    createdAt?: SortOrder
    applications?: ApplicationOrderByRelationAggregateInput
    statuses?: StatusOrderByRelationAggregateInput
    dsa?: DsaOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    username?: string
    email?: string
    phoneNumber?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phoneNumber?: SortOrder
    name?: SortOrder
    city?: SortOrder
    pincode?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    pincode?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LoanWhereInput = {
    AND?: Enumerable<LoanWhereInput>
    OR?: Enumerable<LoanWhereInput>
    NOT?: Enumerable<LoanWhereInput>
    id?: IntFilter | number
    typeId?: IntFilter | number
    bankId?: IntFilter | number
    interest?: FloatFilter | number
    commission?: FloatFilter | number
    loanType?: XOR<LoanTypeRelationFilter, LoanTypeWhereInput>
    bank?: XOR<BankRelationFilter, BankWhereInput>
    applications?: ApplicationListRelationFilter
  }

  export type LoanOrderByWithRelationInput = {
    id?: SortOrder
    typeId?: SortOrder
    bankId?: SortOrder
    interest?: SortOrder
    commission?: SortOrder
    loanType?: LoanTypeOrderByWithRelationInput
    bank?: BankOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
  }

  export type LoanWhereUniqueInput = {
    id?: number
  }

  export type LoanOrderByWithAggregationInput = {
    id?: SortOrder
    typeId?: SortOrder
    bankId?: SortOrder
    interest?: SortOrder
    commission?: SortOrder
    _count?: LoanCountOrderByAggregateInput
    _avg?: LoanAvgOrderByAggregateInput
    _max?: LoanMaxOrderByAggregateInput
    _min?: LoanMinOrderByAggregateInput
    _sum?: LoanSumOrderByAggregateInput
  }

  export type LoanScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LoanScalarWhereWithAggregatesInput>
    OR?: Enumerable<LoanScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LoanScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    typeId?: IntWithAggregatesFilter | number
    bankId?: IntWithAggregatesFilter | number
    interest?: FloatWithAggregatesFilter | number
    commission?: FloatWithAggregatesFilter | number
  }

  export type ApplicationWhereInput = {
    AND?: Enumerable<ApplicationWhereInput>
    OR?: Enumerable<ApplicationWhereInput>
    NOT?: Enumerable<ApplicationWhereInput>
    id?: IntFilter | number
    applicationName?: StringFilter | string
    applicationGovId?: StringFilter | string
    amount?: IntFilter | number
    loanId?: IntFilter | number
    monthly_income?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    loan?: XOR<LoanRelationFilter, LoanWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    statuses?: StatusListRelationFilter
    prefr?: PrefrListRelationFilter
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    applicationName?: SortOrder
    applicationGovId?: SortOrder
    amount?: SortOrder
    loanId?: SortOrder
    monthly_income?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    loan?: LoanOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    statuses?: StatusOrderByRelationAggregateInput
    prefr?: PrefrOrderByRelationAggregateInput
  }

  export type ApplicationWhereUniqueInput = {
    id?: number
  }

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    applicationName?: SortOrder
    applicationGovId?: SortOrder
    amount?: SortOrder
    loanId?: SortOrder
    monthly_income?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApplicationScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApplicationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApplicationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    applicationName?: StringWithAggregatesFilter | string
    applicationGovId?: StringWithAggregatesFilter | string
    amount?: IntWithAggregatesFilter | number
    loanId?: IntWithAggregatesFilter | number
    monthly_income?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StatusWhereInput = {
    AND?: Enumerable<StatusWhereInput>
    OR?: Enumerable<StatusWhereInput>
    NOT?: Enumerable<StatusWhereInput>
    id?: IntFilter | number
    status?: StringFilter | string
    userId?: IntFilter | number
    applicationId?: IntFilter | number
    commissionAdded?: BoolFilter | boolean
    remark?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    application?: XOR<ApplicationRelationFilter, ApplicationWhereInput>
  }

  export type StatusOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    commissionAdded?: SortOrder
    remark?: SortOrder
    user?: UserOrderByWithRelationInput
    application?: ApplicationOrderByWithRelationInput
  }

  export type StatusWhereUniqueInput = {
    id?: number
  }

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    commissionAdded?: SortOrder
    remark?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StatusScalarWhereWithAggregatesInput>
    OR?: Enumerable<StatusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StatusScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    applicationId?: IntWithAggregatesFilter | number
    commissionAdded?: BoolWithAggregatesFilter | boolean
    remark?: StringWithAggregatesFilter | string
  }

  export type LoanTypeWhereInput = {
    AND?: Enumerable<LoanTypeWhereInput>
    OR?: Enumerable<LoanTypeWhereInput>
    NOT?: Enumerable<LoanTypeWhereInput>
    id?: IntFilter | number
    loanName?: StringFilter | string
    loans?: LoanListRelationFilter
  }

  export type LoanTypeOrderByWithRelationInput = {
    id?: SortOrder
    loanName?: SortOrder
    loans?: LoanOrderByRelationAggregateInput
  }

  export type LoanTypeWhereUniqueInput = {
    id?: number
    loanName?: string
  }

  export type LoanTypeOrderByWithAggregationInput = {
    id?: SortOrder
    loanName?: SortOrder
    _count?: LoanTypeCountOrderByAggregateInput
    _avg?: LoanTypeAvgOrderByAggregateInput
    _max?: LoanTypeMaxOrderByAggregateInput
    _min?: LoanTypeMinOrderByAggregateInput
    _sum?: LoanTypeSumOrderByAggregateInput
  }

  export type LoanTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LoanTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<LoanTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LoanTypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    loanName?: StringWithAggregatesFilter | string
  }

  export type BankWhereInput = {
    AND?: Enumerable<BankWhereInput>
    OR?: Enumerable<BankWhereInput>
    NOT?: Enumerable<BankWhereInput>
    id?: IntFilter | number
    bankName?: StringFilter | string
    loans?: LoanListRelationFilter
  }

  export type BankOrderByWithRelationInput = {
    id?: SortOrder
    bankName?: SortOrder
    loans?: LoanOrderByRelationAggregateInput
  }

  export type BankWhereUniqueInput = {
    id?: number
    bankName?: string
  }

  export type BankOrderByWithAggregationInput = {
    id?: SortOrder
    bankName?: SortOrder
    _count?: BankCountOrderByAggregateInput
    _avg?: BankAvgOrderByAggregateInput
    _max?: BankMaxOrderByAggregateInput
    _min?: BankMinOrderByAggregateInput
    _sum?: BankSumOrderByAggregateInput
  }

  export type BankScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BankScalarWhereWithAggregatesInput>
    OR?: Enumerable<BankScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BankScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bankName?: StringWithAggregatesFilter | string
  }

  export type DsaWhereInput = {
    AND?: Enumerable<DsaWhereInput>
    OR?: Enumerable<DsaWhereInput>
    NOT?: Enumerable<DsaWhereInput>
    dsaId?: IntFilter | number
    totalCommission?: FloatFilter | number
    commissionRemaining?: FloatFilter | number
    amountLoan?: FloatFilter | number
    loansIssued?: IntFilter | number
    commissionPercentage?: FloatFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DsaOrderByWithRelationInput = {
    dsaId?: SortOrder
    totalCommission?: SortOrder
    commissionRemaining?: SortOrder
    amountLoan?: SortOrder
    loansIssued?: SortOrder
    commissionPercentage?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DsaWhereUniqueInput = {
    dsaId?: number
  }

  export type DsaOrderByWithAggregationInput = {
    dsaId?: SortOrder
    totalCommission?: SortOrder
    commissionRemaining?: SortOrder
    amountLoan?: SortOrder
    loansIssued?: SortOrder
    commissionPercentage?: SortOrder
    _count?: DsaCountOrderByAggregateInput
    _avg?: DsaAvgOrderByAggregateInput
    _max?: DsaMaxOrderByAggregateInput
    _min?: DsaMinOrderByAggregateInput
    _sum?: DsaSumOrderByAggregateInput
  }

  export type DsaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DsaScalarWhereWithAggregatesInput>
    OR?: Enumerable<DsaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DsaScalarWhereWithAggregatesInput>
    dsaId?: IntWithAggregatesFilter | number
    totalCommission?: FloatWithAggregatesFilter | number
    commissionRemaining?: FloatWithAggregatesFilter | number
    amountLoan?: FloatWithAggregatesFilter | number
    loansIssued?: IntWithAggregatesFilter | number
    commissionPercentage?: FloatWithAggregatesFilter | number
  }

  export type AdminWhereInput = {
    AND?: Enumerable<AdminWhereInput>
    OR?: Enumerable<AdminWhereInput>
    NOT?: Enumerable<AdminWhereInput>
    adminId?: IntFilter | number
    adminUsername?: StringFilter | string
    adminEmail?: StringFilter | string
    adminPassword?: StringFilter | string
  }

  export type AdminOrderByWithRelationInput = {
    adminId?: SortOrder
    adminUsername?: SortOrder
    adminEmail?: SortOrder
    adminPassword?: SortOrder
  }

  export type AdminWhereUniqueInput = {
    adminId?: number
    adminUsername?: string
    adminEmail?: string
  }

  export type AdminOrderByWithAggregationInput = {
    adminId?: SortOrder
    adminUsername?: SortOrder
    adminEmail?: SortOrder
    adminPassword?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdminScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdminScalarWhereWithAggregatesInput>
    adminId?: IntWithAggregatesFilter | number
    adminUsername?: StringWithAggregatesFilter | string
    adminEmail?: StringWithAggregatesFilter | string
    adminPassword?: StringWithAggregatesFilter | string
  }

  export type PrefrWhereInput = {
    AND?: Enumerable<PrefrWhereInput>
    OR?: Enumerable<PrefrWhereInput>
    NOT?: Enumerable<PrefrWhereInput>
    applicationId?: IntFilter | number
    loanId?: StringFilter | string
    application?: XOR<ApplicationRelationFilter, ApplicationWhereInput>
  }

  export type PrefrOrderByWithRelationInput = {
    applicationId?: SortOrder
    loanId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type PrefrWhereUniqueInput = {
    applicationId?: number
    loanId?: string
  }

  export type PrefrOrderByWithAggregationInput = {
    applicationId?: SortOrder
    loanId?: SortOrder
    _count?: PrefrCountOrderByAggregateInput
    _avg?: PrefrAvgOrderByAggregateInput
    _max?: PrefrMaxOrderByAggregateInput
    _min?: PrefrMinOrderByAggregateInput
    _sum?: PrefrSumOrderByAggregateInput
  }

  export type PrefrScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PrefrScalarWhereWithAggregatesInput>
    OR?: Enumerable<PrefrScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PrefrScalarWhereWithAggregatesInput>
    applicationId?: IntWithAggregatesFilter | number
    loanId?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutUserInput
    statuses?: StatusCreateNestedManyWithoutUserInput
    dsa?: DsaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    statuses?: StatusUncheckedCreateNestedManyWithoutUserInput
    dsa?: DsaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    statuses?: StatusUpdateManyWithoutUserNestedInput
    dsa?: DsaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    statuses?: StatusUncheckedUpdateManyWithoutUserNestedInput
    dsa?: DsaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanCreateInput = {
    interest: number
    commission: number
    loanType: LoanTypeCreateNestedOneWithoutLoansInput
    bank: BankCreateNestedOneWithoutLoansInput
    applications?: ApplicationCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateInput = {
    id?: number
    typeId: number
    bankId: number
    interest: number
    commission: number
    applications?: ApplicationUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanUpdateInput = {
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    loanType?: LoanTypeUpdateOneRequiredWithoutLoansNestedInput
    bank?: BankUpdateOneRequiredWithoutLoansNestedInput
    applications?: ApplicationUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    bankId?: IntFieldUpdateOperationsInput | number
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    applications?: ApplicationUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanCreateManyInput = {
    id?: number
    typeId: number
    bankId: number
    interest: number
    commission: number
  }

  export type LoanUpdateManyMutationInput = {
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
  }

  export type LoanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    bankId?: IntFieldUpdateOperationsInput | number
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
  }

  export type ApplicationCreateInput = {
    applicationName: string
    applicationGovId: string
    amount: number
    monthly_income: number
    createdAt?: Date | string
    loan: LoanCreateNestedOneWithoutApplicationsInput
    user: UserCreateNestedOneWithoutApplicationsInput
    statuses?: StatusCreateNestedManyWithoutApplicationInput
    prefr?: PrefrCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: number
    applicationName: string
    applicationGovId: string
    amount: number
    loanId: number
    monthly_income: number
    userId: number
    createdAt?: Date | string
    statuses?: StatusUncheckedCreateNestedManyWithoutApplicationInput
    prefr?: PrefrUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutApplicationsNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    statuses?: StatusUpdateManyWithoutApplicationNestedInput
    prefr?: PrefrUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    loanId?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: StatusUncheckedUpdateManyWithoutApplicationNestedInput
    prefr?: PrefrUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: number
    applicationName: string
    applicationGovId: string
    amount: number
    loanId: number
    monthly_income: number
    userId: number
    createdAt?: Date | string
  }

  export type ApplicationUpdateManyMutationInput = {
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    loanId?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusCreateInput = {
    status: string
    commissionAdded: boolean
    remark: string
    user: UserCreateNestedOneWithoutStatusesInput
    application: ApplicationCreateNestedOneWithoutStatusesInput
  }

  export type StatusUncheckedCreateInput = {
    id?: number
    status: string
    userId: number
    applicationId: number
    commissionAdded: boolean
    remark: string
  }

  export type StatusUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    commissionAdded?: BoolFieldUpdateOperationsInput | boolean
    remark?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutStatusesNestedInput
    application?: ApplicationUpdateOneRequiredWithoutStatusesNestedInput
  }

  export type StatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    commissionAdded?: BoolFieldUpdateOperationsInput | boolean
    remark?: StringFieldUpdateOperationsInput | string
  }

  export type StatusCreateManyInput = {
    id?: number
    status: string
    userId: number
    applicationId: number
    commissionAdded: boolean
    remark: string
  }

  export type StatusUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    commissionAdded?: BoolFieldUpdateOperationsInput | boolean
    remark?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    commissionAdded?: BoolFieldUpdateOperationsInput | boolean
    remark?: StringFieldUpdateOperationsInput | string
  }

  export type LoanTypeCreateInput = {
    loanName: string
    loans?: LoanCreateNestedManyWithoutLoanTypeInput
  }

  export type LoanTypeUncheckedCreateInput = {
    id?: number
    loanName: string
    loans?: LoanUncheckedCreateNestedManyWithoutLoanTypeInput
  }

  export type LoanTypeUpdateInput = {
    loanName?: StringFieldUpdateOperationsInput | string
    loans?: LoanUpdateManyWithoutLoanTypeNestedInput
  }

  export type LoanTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    loanName?: StringFieldUpdateOperationsInput | string
    loans?: LoanUncheckedUpdateManyWithoutLoanTypeNestedInput
  }

  export type LoanTypeCreateManyInput = {
    id?: number
    loanName: string
  }

  export type LoanTypeUpdateManyMutationInput = {
    loanName?: StringFieldUpdateOperationsInput | string
  }

  export type LoanTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    loanName?: StringFieldUpdateOperationsInput | string
  }

  export type BankCreateInput = {
    bankName: string
    loans?: LoanCreateNestedManyWithoutBankInput
  }

  export type BankUncheckedCreateInput = {
    id?: number
    bankName: string
    loans?: LoanUncheckedCreateNestedManyWithoutBankInput
  }

  export type BankUpdateInput = {
    bankName?: StringFieldUpdateOperationsInput | string
    loans?: LoanUpdateManyWithoutBankNestedInput
  }

  export type BankUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bankName?: StringFieldUpdateOperationsInput | string
    loans?: LoanUncheckedUpdateManyWithoutBankNestedInput
  }

  export type BankCreateManyInput = {
    id?: number
    bankName: string
  }

  export type BankUpdateManyMutationInput = {
    bankName?: StringFieldUpdateOperationsInput | string
  }

  export type BankUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bankName?: StringFieldUpdateOperationsInput | string
  }

  export type DsaCreateInput = {
    totalCommission?: number
    commissionRemaining?: number
    amountLoan?: number
    loansIssued?: number
    commissionPercentage?: number
    user: UserCreateNestedOneWithoutDsaInput
  }

  export type DsaUncheckedCreateInput = {
    dsaId: number
    totalCommission?: number
    commissionRemaining?: number
    amountLoan?: number
    loansIssued?: number
    commissionPercentage?: number
  }

  export type DsaUpdateInput = {
    totalCommission?: FloatFieldUpdateOperationsInput | number
    commissionRemaining?: FloatFieldUpdateOperationsInput | number
    amountLoan?: FloatFieldUpdateOperationsInput | number
    loansIssued?: IntFieldUpdateOperationsInput | number
    commissionPercentage?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutDsaNestedInput
  }

  export type DsaUncheckedUpdateInput = {
    dsaId?: IntFieldUpdateOperationsInput | number
    totalCommission?: FloatFieldUpdateOperationsInput | number
    commissionRemaining?: FloatFieldUpdateOperationsInput | number
    amountLoan?: FloatFieldUpdateOperationsInput | number
    loansIssued?: IntFieldUpdateOperationsInput | number
    commissionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type DsaCreateManyInput = {
    dsaId: number
    totalCommission?: number
    commissionRemaining?: number
    amountLoan?: number
    loansIssued?: number
    commissionPercentage?: number
  }

  export type DsaUpdateManyMutationInput = {
    totalCommission?: FloatFieldUpdateOperationsInput | number
    commissionRemaining?: FloatFieldUpdateOperationsInput | number
    amountLoan?: FloatFieldUpdateOperationsInput | number
    loansIssued?: IntFieldUpdateOperationsInput | number
    commissionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type DsaUncheckedUpdateManyInput = {
    dsaId?: IntFieldUpdateOperationsInput | number
    totalCommission?: FloatFieldUpdateOperationsInput | number
    commissionRemaining?: FloatFieldUpdateOperationsInput | number
    amountLoan?: FloatFieldUpdateOperationsInput | number
    loansIssued?: IntFieldUpdateOperationsInput | number
    commissionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type AdminCreateInput = {
    adminUsername: string
    adminEmail: string
    adminPassword: string
  }

  export type AdminUncheckedCreateInput = {
    adminId?: number
    adminUsername: string
    adminEmail: string
    adminPassword: string
  }

  export type AdminUpdateInput = {
    adminUsername?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPassword?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateInput = {
    adminId?: IntFieldUpdateOperationsInput | number
    adminUsername?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPassword?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    adminId?: number
    adminUsername: string
    adminEmail: string
    adminPassword: string
  }

  export type AdminUpdateManyMutationInput = {
    adminUsername?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPassword?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    adminId?: IntFieldUpdateOperationsInput | number
    adminUsername?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPassword?: StringFieldUpdateOperationsInput | string
  }

  export type PrefrCreateInput = {
    loanId: string
    application: ApplicationCreateNestedOneWithoutPrefrInput
  }

  export type PrefrUncheckedCreateInput = {
    applicationId: number
    loanId: string
  }

  export type PrefrUpdateInput = {
    loanId?: StringFieldUpdateOperationsInput | string
    application?: ApplicationUpdateOneRequiredWithoutPrefrNestedInput
  }

  export type PrefrUncheckedUpdateInput = {
    applicationId?: IntFieldUpdateOperationsInput | number
    loanId?: StringFieldUpdateOperationsInput | string
  }

  export type PrefrCreateManyInput = {
    applicationId: number
    loanId: string
  }

  export type PrefrUpdateManyMutationInput = {
    loanId?: StringFieldUpdateOperationsInput | string
  }

  export type PrefrUncheckedUpdateManyInput = {
    applicationId?: IntFieldUpdateOperationsInput | number
    loanId?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type StatusListRelationFilter = {
    every?: StatusWhereInput
    some?: StatusWhereInput
    none?: StatusWhereInput
  }

  export type DsaListRelationFilter = {
    every?: DsaWhereInput
    some?: DsaWhereInput
    none?: DsaWhereInput
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DsaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phoneNumber?: SortOrder
    name?: SortOrder
    city?: SortOrder
    pincode?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phoneNumber?: SortOrder
    name?: SortOrder
    city?: SortOrder
    pincode?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phoneNumber?: SortOrder
    name?: SortOrder
    city?: SortOrder
    pincode?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type LoanTypeRelationFilter = {
    is?: LoanTypeWhereInput
    isNot?: LoanTypeWhereInput
  }

  export type BankRelationFilter = {
    is?: BankWhereInput
    isNot?: BankWhereInput
  }

  export type LoanCountOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    bankId?: SortOrder
    interest?: SortOrder
    commission?: SortOrder
  }

  export type LoanAvgOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    bankId?: SortOrder
    interest?: SortOrder
    commission?: SortOrder
  }

  export type LoanMaxOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    bankId?: SortOrder
    interest?: SortOrder
    commission?: SortOrder
  }

  export type LoanMinOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    bankId?: SortOrder
    interest?: SortOrder
    commission?: SortOrder
  }

  export type LoanSumOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
    bankId?: SortOrder
    interest?: SortOrder
    commission?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type LoanRelationFilter = {
    is?: LoanWhereInput
    isNot?: LoanWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PrefrListRelationFilter = {
    every?: PrefrWhereInput
    some?: PrefrWhereInput
    none?: PrefrWhereInput
  }

  export type PrefrOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    applicationName?: SortOrder
    applicationGovId?: SortOrder
    amount?: SortOrder
    loanId?: SortOrder
    monthly_income?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    loanId?: SortOrder
    monthly_income?: SortOrder
    userId?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationName?: SortOrder
    applicationGovId?: SortOrder
    amount?: SortOrder
    loanId?: SortOrder
    monthly_income?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    applicationName?: SortOrder
    applicationGovId?: SortOrder
    amount?: SortOrder
    loanId?: SortOrder
    monthly_income?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    loanId?: SortOrder
    monthly_income?: SortOrder
    userId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ApplicationRelationFilter = {
    is?: ApplicationWhereInput
    isNot?: ApplicationWhereInput
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    commissionAdded?: SortOrder
    remark?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    commissionAdded?: SortOrder
    remark?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    commissionAdded?: SortOrder
    remark?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type LoanListRelationFilter = {
    every?: LoanWhereInput
    some?: LoanWhereInput
    none?: LoanWhereInput
  }

  export type LoanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoanTypeCountOrderByAggregateInput = {
    id?: SortOrder
    loanName?: SortOrder
  }

  export type LoanTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LoanTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    loanName?: SortOrder
  }

  export type LoanTypeMinOrderByAggregateInput = {
    id?: SortOrder
    loanName?: SortOrder
  }

  export type LoanTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BankCountOrderByAggregateInput = {
    id?: SortOrder
    bankName?: SortOrder
  }

  export type BankAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BankMaxOrderByAggregateInput = {
    id?: SortOrder
    bankName?: SortOrder
  }

  export type BankMinOrderByAggregateInput = {
    id?: SortOrder
    bankName?: SortOrder
  }

  export type BankSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DsaCountOrderByAggregateInput = {
    dsaId?: SortOrder
    totalCommission?: SortOrder
    commissionRemaining?: SortOrder
    amountLoan?: SortOrder
    loansIssued?: SortOrder
    commissionPercentage?: SortOrder
  }

  export type DsaAvgOrderByAggregateInput = {
    dsaId?: SortOrder
    totalCommission?: SortOrder
    commissionRemaining?: SortOrder
    amountLoan?: SortOrder
    loansIssued?: SortOrder
    commissionPercentage?: SortOrder
  }

  export type DsaMaxOrderByAggregateInput = {
    dsaId?: SortOrder
    totalCommission?: SortOrder
    commissionRemaining?: SortOrder
    amountLoan?: SortOrder
    loansIssued?: SortOrder
    commissionPercentage?: SortOrder
  }

  export type DsaMinOrderByAggregateInput = {
    dsaId?: SortOrder
    totalCommission?: SortOrder
    commissionRemaining?: SortOrder
    amountLoan?: SortOrder
    loansIssued?: SortOrder
    commissionPercentage?: SortOrder
  }

  export type DsaSumOrderByAggregateInput = {
    dsaId?: SortOrder
    totalCommission?: SortOrder
    commissionRemaining?: SortOrder
    amountLoan?: SortOrder
    loansIssued?: SortOrder
    commissionPercentage?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    adminId?: SortOrder
    adminUsername?: SortOrder
    adminEmail?: SortOrder
    adminPassword?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    adminId?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    adminId?: SortOrder
    adminUsername?: SortOrder
    adminEmail?: SortOrder
    adminPassword?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    adminId?: SortOrder
    adminUsername?: SortOrder
    adminEmail?: SortOrder
    adminPassword?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    adminId?: SortOrder
  }

  export type PrefrCountOrderByAggregateInput = {
    applicationId?: SortOrder
    loanId?: SortOrder
  }

  export type PrefrAvgOrderByAggregateInput = {
    applicationId?: SortOrder
  }

  export type PrefrMaxOrderByAggregateInput = {
    applicationId?: SortOrder
    loanId?: SortOrder
  }

  export type PrefrMinOrderByAggregateInput = {
    applicationId?: SortOrder
    loanId?: SortOrder
  }

  export type PrefrSumOrderByAggregateInput = {
    applicationId?: SortOrder
  }

  export type ApplicationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutUserInput>, Enumerable<ApplicationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutUserInput>
    createMany?: ApplicationCreateManyUserInputEnvelope
    connect?: Enumerable<ApplicationWhereUniqueInput>
  }

  export type StatusCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StatusCreateWithoutUserInput>, Enumerable<StatusUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutUserInput>
    createMany?: StatusCreateManyUserInputEnvelope
    connect?: Enumerable<StatusWhereUniqueInput>
  }

  export type DsaCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DsaCreateWithoutUserInput>, Enumerable<DsaUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DsaCreateOrConnectWithoutUserInput>
    createMany?: DsaCreateManyUserInputEnvelope
    connect?: Enumerable<DsaWhereUniqueInput>
  }

  export type ApplicationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutUserInput>, Enumerable<ApplicationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutUserInput>
    createMany?: ApplicationCreateManyUserInputEnvelope
    connect?: Enumerable<ApplicationWhereUniqueInput>
  }

  export type StatusUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<StatusCreateWithoutUserInput>, Enumerable<StatusUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutUserInput>
    createMany?: StatusCreateManyUserInputEnvelope
    connect?: Enumerable<StatusWhereUniqueInput>
  }

  export type DsaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<DsaCreateWithoutUserInput>, Enumerable<DsaUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DsaCreateOrConnectWithoutUserInput>
    createMany?: DsaCreateManyUserInputEnvelope
    connect?: Enumerable<DsaWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ApplicationUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutUserInput>, Enumerable<ApplicationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ApplicationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ApplicationCreateManyUserInputEnvelope
    set?: Enumerable<ApplicationWhereUniqueInput>
    disconnect?: Enumerable<ApplicationWhereUniqueInput>
    delete?: Enumerable<ApplicationWhereUniqueInput>
    connect?: Enumerable<ApplicationWhereUniqueInput>
    update?: Enumerable<ApplicationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ApplicationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ApplicationScalarWhereInput>
  }

  export type StatusUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<StatusCreateWithoutUserInput>, Enumerable<StatusUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StatusUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StatusCreateManyUserInputEnvelope
    set?: Enumerable<StatusWhereUniqueInput>
    disconnect?: Enumerable<StatusWhereUniqueInput>
    delete?: Enumerable<StatusWhereUniqueInput>
    connect?: Enumerable<StatusWhereUniqueInput>
    update?: Enumerable<StatusUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StatusUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StatusScalarWhereInput>
  }

  export type DsaUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DsaCreateWithoutUserInput>, Enumerable<DsaUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DsaCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DsaUpsertWithWhereUniqueWithoutUserInput>
    createMany?: DsaCreateManyUserInputEnvelope
    set?: Enumerable<DsaWhereUniqueInput>
    disconnect?: Enumerable<DsaWhereUniqueInput>
    delete?: Enumerable<DsaWhereUniqueInput>
    connect?: Enumerable<DsaWhereUniqueInput>
    update?: Enumerable<DsaUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DsaUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DsaScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApplicationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutUserInput>, Enumerable<ApplicationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ApplicationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ApplicationCreateManyUserInputEnvelope
    set?: Enumerable<ApplicationWhereUniqueInput>
    disconnect?: Enumerable<ApplicationWhereUniqueInput>
    delete?: Enumerable<ApplicationWhereUniqueInput>
    connect?: Enumerable<ApplicationWhereUniqueInput>
    update?: Enumerable<ApplicationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ApplicationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ApplicationScalarWhereInput>
  }

  export type StatusUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<StatusCreateWithoutUserInput>, Enumerable<StatusUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<StatusUpsertWithWhereUniqueWithoutUserInput>
    createMany?: StatusCreateManyUserInputEnvelope
    set?: Enumerable<StatusWhereUniqueInput>
    disconnect?: Enumerable<StatusWhereUniqueInput>
    delete?: Enumerable<StatusWhereUniqueInput>
    connect?: Enumerable<StatusWhereUniqueInput>
    update?: Enumerable<StatusUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<StatusUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<StatusScalarWhereInput>
  }

  export type DsaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<DsaCreateWithoutUserInput>, Enumerable<DsaUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<DsaCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<DsaUpsertWithWhereUniqueWithoutUserInput>
    createMany?: DsaCreateManyUserInputEnvelope
    set?: Enumerable<DsaWhereUniqueInput>
    disconnect?: Enumerable<DsaWhereUniqueInput>
    delete?: Enumerable<DsaWhereUniqueInput>
    connect?: Enumerable<DsaWhereUniqueInput>
    update?: Enumerable<DsaUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<DsaUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<DsaScalarWhereInput>
  }

  export type LoanTypeCreateNestedOneWithoutLoansInput = {
    create?: XOR<LoanTypeCreateWithoutLoansInput, LoanTypeUncheckedCreateWithoutLoansInput>
    connectOrCreate?: LoanTypeCreateOrConnectWithoutLoansInput
    connect?: LoanTypeWhereUniqueInput
  }

  export type BankCreateNestedOneWithoutLoansInput = {
    create?: XOR<BankCreateWithoutLoansInput, BankUncheckedCreateWithoutLoansInput>
    connectOrCreate?: BankCreateOrConnectWithoutLoansInput
    connect?: BankWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutLoanInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutLoanInput>, Enumerable<ApplicationUncheckedCreateWithoutLoanInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutLoanInput>
    createMany?: ApplicationCreateManyLoanInputEnvelope
    connect?: Enumerable<ApplicationWhereUniqueInput>
  }

  export type ApplicationUncheckedCreateNestedManyWithoutLoanInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutLoanInput>, Enumerable<ApplicationUncheckedCreateWithoutLoanInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutLoanInput>
    createMany?: ApplicationCreateManyLoanInputEnvelope
    connect?: Enumerable<ApplicationWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LoanTypeUpdateOneRequiredWithoutLoansNestedInput = {
    create?: XOR<LoanTypeCreateWithoutLoansInput, LoanTypeUncheckedCreateWithoutLoansInput>
    connectOrCreate?: LoanTypeCreateOrConnectWithoutLoansInput
    upsert?: LoanTypeUpsertWithoutLoansInput
    connect?: LoanTypeWhereUniqueInput
    update?: XOR<LoanTypeUpdateWithoutLoansInput, LoanTypeUncheckedUpdateWithoutLoansInput>
  }

  export type BankUpdateOneRequiredWithoutLoansNestedInput = {
    create?: XOR<BankCreateWithoutLoansInput, BankUncheckedCreateWithoutLoansInput>
    connectOrCreate?: BankCreateOrConnectWithoutLoansInput
    upsert?: BankUpsertWithoutLoansInput
    connect?: BankWhereUniqueInput
    update?: XOR<BankUpdateWithoutLoansInput, BankUncheckedUpdateWithoutLoansInput>
  }

  export type ApplicationUpdateManyWithoutLoanNestedInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutLoanInput>, Enumerable<ApplicationUncheckedCreateWithoutLoanInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutLoanInput>
    upsert?: Enumerable<ApplicationUpsertWithWhereUniqueWithoutLoanInput>
    createMany?: ApplicationCreateManyLoanInputEnvelope
    set?: Enumerable<ApplicationWhereUniqueInput>
    disconnect?: Enumerable<ApplicationWhereUniqueInput>
    delete?: Enumerable<ApplicationWhereUniqueInput>
    connect?: Enumerable<ApplicationWhereUniqueInput>
    update?: Enumerable<ApplicationUpdateWithWhereUniqueWithoutLoanInput>
    updateMany?: Enumerable<ApplicationUpdateManyWithWhereWithoutLoanInput>
    deleteMany?: Enumerable<ApplicationScalarWhereInput>
  }

  export type ApplicationUncheckedUpdateManyWithoutLoanNestedInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutLoanInput>, Enumerable<ApplicationUncheckedCreateWithoutLoanInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutLoanInput>
    upsert?: Enumerable<ApplicationUpsertWithWhereUniqueWithoutLoanInput>
    createMany?: ApplicationCreateManyLoanInputEnvelope
    set?: Enumerable<ApplicationWhereUniqueInput>
    disconnect?: Enumerable<ApplicationWhereUniqueInput>
    delete?: Enumerable<ApplicationWhereUniqueInput>
    connect?: Enumerable<ApplicationWhereUniqueInput>
    update?: Enumerable<ApplicationUpdateWithWhereUniqueWithoutLoanInput>
    updateMany?: Enumerable<ApplicationUpdateManyWithWhereWithoutLoanInput>
    deleteMany?: Enumerable<ApplicationScalarWhereInput>
  }

  export type LoanCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<LoanCreateWithoutApplicationsInput, LoanUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutApplicationsInput
    connect?: LoanWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationsInput
    connect?: UserWhereUniqueInput
  }

  export type StatusCreateNestedManyWithoutApplicationInput = {
    create?: XOR<Enumerable<StatusCreateWithoutApplicationInput>, Enumerable<StatusUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutApplicationInput>
    createMany?: StatusCreateManyApplicationInputEnvelope
    connect?: Enumerable<StatusWhereUniqueInput>
  }

  export type PrefrCreateNestedManyWithoutApplicationInput = {
    create?: XOR<Enumerable<PrefrCreateWithoutApplicationInput>, Enumerable<PrefrUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<PrefrCreateOrConnectWithoutApplicationInput>
    createMany?: PrefrCreateManyApplicationInputEnvelope
    connect?: Enumerable<PrefrWhereUniqueInput>
  }

  export type StatusUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<Enumerable<StatusCreateWithoutApplicationInput>, Enumerable<StatusUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutApplicationInput>
    createMany?: StatusCreateManyApplicationInputEnvelope
    connect?: Enumerable<StatusWhereUniqueInput>
  }

  export type PrefrUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<Enumerable<PrefrCreateWithoutApplicationInput>, Enumerable<PrefrUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<PrefrCreateOrConnectWithoutApplicationInput>
    createMany?: PrefrCreateManyApplicationInputEnvelope
    connect?: Enumerable<PrefrWhereUniqueInput>
  }

  export type LoanUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<LoanCreateWithoutApplicationsInput, LoanUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutApplicationsInput
    upsert?: LoanUpsertWithoutApplicationsInput
    connect?: LoanWhereUniqueInput
    update?: XOR<LoanUpdateWithoutApplicationsInput, LoanUncheckedUpdateWithoutApplicationsInput>
  }

  export type UserUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationsInput
    upsert?: UserUpsertWithoutApplicationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutApplicationsInput, UserUncheckedUpdateWithoutApplicationsInput>
  }

  export type StatusUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<Enumerable<StatusCreateWithoutApplicationInput>, Enumerable<StatusUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutApplicationInput>
    upsert?: Enumerable<StatusUpsertWithWhereUniqueWithoutApplicationInput>
    createMany?: StatusCreateManyApplicationInputEnvelope
    set?: Enumerable<StatusWhereUniqueInput>
    disconnect?: Enumerable<StatusWhereUniqueInput>
    delete?: Enumerable<StatusWhereUniqueInput>
    connect?: Enumerable<StatusWhereUniqueInput>
    update?: Enumerable<StatusUpdateWithWhereUniqueWithoutApplicationInput>
    updateMany?: Enumerable<StatusUpdateManyWithWhereWithoutApplicationInput>
    deleteMany?: Enumerable<StatusScalarWhereInput>
  }

  export type PrefrUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<Enumerable<PrefrCreateWithoutApplicationInput>, Enumerable<PrefrUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<PrefrCreateOrConnectWithoutApplicationInput>
    upsert?: Enumerable<PrefrUpsertWithWhereUniqueWithoutApplicationInput>
    createMany?: PrefrCreateManyApplicationInputEnvelope
    set?: Enumerable<PrefrWhereUniqueInput>
    disconnect?: Enumerable<PrefrWhereUniqueInput>
    delete?: Enumerable<PrefrWhereUniqueInput>
    connect?: Enumerable<PrefrWhereUniqueInput>
    update?: Enumerable<PrefrUpdateWithWhereUniqueWithoutApplicationInput>
    updateMany?: Enumerable<PrefrUpdateManyWithWhereWithoutApplicationInput>
    deleteMany?: Enumerable<PrefrScalarWhereInput>
  }

  export type StatusUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<Enumerable<StatusCreateWithoutApplicationInput>, Enumerable<StatusUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<StatusCreateOrConnectWithoutApplicationInput>
    upsert?: Enumerable<StatusUpsertWithWhereUniqueWithoutApplicationInput>
    createMany?: StatusCreateManyApplicationInputEnvelope
    set?: Enumerable<StatusWhereUniqueInput>
    disconnect?: Enumerable<StatusWhereUniqueInput>
    delete?: Enumerable<StatusWhereUniqueInput>
    connect?: Enumerable<StatusWhereUniqueInput>
    update?: Enumerable<StatusUpdateWithWhereUniqueWithoutApplicationInput>
    updateMany?: Enumerable<StatusUpdateManyWithWhereWithoutApplicationInput>
    deleteMany?: Enumerable<StatusScalarWhereInput>
  }

  export type PrefrUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<Enumerable<PrefrCreateWithoutApplicationInput>, Enumerable<PrefrUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<PrefrCreateOrConnectWithoutApplicationInput>
    upsert?: Enumerable<PrefrUpsertWithWhereUniqueWithoutApplicationInput>
    createMany?: PrefrCreateManyApplicationInputEnvelope
    set?: Enumerable<PrefrWhereUniqueInput>
    disconnect?: Enumerable<PrefrWhereUniqueInput>
    delete?: Enumerable<PrefrWhereUniqueInput>
    connect?: Enumerable<PrefrWhereUniqueInput>
    update?: Enumerable<PrefrUpdateWithWhereUniqueWithoutApplicationInput>
    updateMany?: Enumerable<PrefrUpdateManyWithWhereWithoutApplicationInput>
    deleteMany?: Enumerable<PrefrScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutStatusesInput = {
    create?: XOR<UserCreateWithoutStatusesInput, UserUncheckedCreateWithoutStatusesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusesInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationCreateNestedOneWithoutStatusesInput = {
    create?: XOR<ApplicationCreateWithoutStatusesInput, ApplicationUncheckedCreateWithoutStatusesInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutStatusesInput
    connect?: ApplicationWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutStatusesNestedInput = {
    create?: XOR<UserCreateWithoutStatusesInput, UserUncheckedCreateWithoutStatusesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusesInput
    upsert?: UserUpsertWithoutStatusesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutStatusesInput, UserUncheckedUpdateWithoutStatusesInput>
  }

  export type ApplicationUpdateOneRequiredWithoutStatusesNestedInput = {
    create?: XOR<ApplicationCreateWithoutStatusesInput, ApplicationUncheckedCreateWithoutStatusesInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutStatusesInput
    upsert?: ApplicationUpsertWithoutStatusesInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<ApplicationUpdateWithoutStatusesInput, ApplicationUncheckedUpdateWithoutStatusesInput>
  }

  export type LoanCreateNestedManyWithoutLoanTypeInput = {
    create?: XOR<Enumerable<LoanCreateWithoutLoanTypeInput>, Enumerable<LoanUncheckedCreateWithoutLoanTypeInput>>
    connectOrCreate?: Enumerable<LoanCreateOrConnectWithoutLoanTypeInput>
    createMany?: LoanCreateManyLoanTypeInputEnvelope
    connect?: Enumerable<LoanWhereUniqueInput>
  }

  export type LoanUncheckedCreateNestedManyWithoutLoanTypeInput = {
    create?: XOR<Enumerable<LoanCreateWithoutLoanTypeInput>, Enumerable<LoanUncheckedCreateWithoutLoanTypeInput>>
    connectOrCreate?: Enumerable<LoanCreateOrConnectWithoutLoanTypeInput>
    createMany?: LoanCreateManyLoanTypeInputEnvelope
    connect?: Enumerable<LoanWhereUniqueInput>
  }

  export type LoanUpdateManyWithoutLoanTypeNestedInput = {
    create?: XOR<Enumerable<LoanCreateWithoutLoanTypeInput>, Enumerable<LoanUncheckedCreateWithoutLoanTypeInput>>
    connectOrCreate?: Enumerable<LoanCreateOrConnectWithoutLoanTypeInput>
    upsert?: Enumerable<LoanUpsertWithWhereUniqueWithoutLoanTypeInput>
    createMany?: LoanCreateManyLoanTypeInputEnvelope
    set?: Enumerable<LoanWhereUniqueInput>
    disconnect?: Enumerable<LoanWhereUniqueInput>
    delete?: Enumerable<LoanWhereUniqueInput>
    connect?: Enumerable<LoanWhereUniqueInput>
    update?: Enumerable<LoanUpdateWithWhereUniqueWithoutLoanTypeInput>
    updateMany?: Enumerable<LoanUpdateManyWithWhereWithoutLoanTypeInput>
    deleteMany?: Enumerable<LoanScalarWhereInput>
  }

  export type LoanUncheckedUpdateManyWithoutLoanTypeNestedInput = {
    create?: XOR<Enumerable<LoanCreateWithoutLoanTypeInput>, Enumerable<LoanUncheckedCreateWithoutLoanTypeInput>>
    connectOrCreate?: Enumerable<LoanCreateOrConnectWithoutLoanTypeInput>
    upsert?: Enumerable<LoanUpsertWithWhereUniqueWithoutLoanTypeInput>
    createMany?: LoanCreateManyLoanTypeInputEnvelope
    set?: Enumerable<LoanWhereUniqueInput>
    disconnect?: Enumerable<LoanWhereUniqueInput>
    delete?: Enumerable<LoanWhereUniqueInput>
    connect?: Enumerable<LoanWhereUniqueInput>
    update?: Enumerable<LoanUpdateWithWhereUniqueWithoutLoanTypeInput>
    updateMany?: Enumerable<LoanUpdateManyWithWhereWithoutLoanTypeInput>
    deleteMany?: Enumerable<LoanScalarWhereInput>
  }

  export type LoanCreateNestedManyWithoutBankInput = {
    create?: XOR<Enumerable<LoanCreateWithoutBankInput>, Enumerable<LoanUncheckedCreateWithoutBankInput>>
    connectOrCreate?: Enumerable<LoanCreateOrConnectWithoutBankInput>
    createMany?: LoanCreateManyBankInputEnvelope
    connect?: Enumerable<LoanWhereUniqueInput>
  }

  export type LoanUncheckedCreateNestedManyWithoutBankInput = {
    create?: XOR<Enumerable<LoanCreateWithoutBankInput>, Enumerable<LoanUncheckedCreateWithoutBankInput>>
    connectOrCreate?: Enumerable<LoanCreateOrConnectWithoutBankInput>
    createMany?: LoanCreateManyBankInputEnvelope
    connect?: Enumerable<LoanWhereUniqueInput>
  }

  export type LoanUpdateManyWithoutBankNestedInput = {
    create?: XOR<Enumerable<LoanCreateWithoutBankInput>, Enumerable<LoanUncheckedCreateWithoutBankInput>>
    connectOrCreate?: Enumerable<LoanCreateOrConnectWithoutBankInput>
    upsert?: Enumerable<LoanUpsertWithWhereUniqueWithoutBankInput>
    createMany?: LoanCreateManyBankInputEnvelope
    set?: Enumerable<LoanWhereUniqueInput>
    disconnect?: Enumerable<LoanWhereUniqueInput>
    delete?: Enumerable<LoanWhereUniqueInput>
    connect?: Enumerable<LoanWhereUniqueInput>
    update?: Enumerable<LoanUpdateWithWhereUniqueWithoutBankInput>
    updateMany?: Enumerable<LoanUpdateManyWithWhereWithoutBankInput>
    deleteMany?: Enumerable<LoanScalarWhereInput>
  }

  export type LoanUncheckedUpdateManyWithoutBankNestedInput = {
    create?: XOR<Enumerable<LoanCreateWithoutBankInput>, Enumerable<LoanUncheckedCreateWithoutBankInput>>
    connectOrCreate?: Enumerable<LoanCreateOrConnectWithoutBankInput>
    upsert?: Enumerable<LoanUpsertWithWhereUniqueWithoutBankInput>
    createMany?: LoanCreateManyBankInputEnvelope
    set?: Enumerable<LoanWhereUniqueInput>
    disconnect?: Enumerable<LoanWhereUniqueInput>
    delete?: Enumerable<LoanWhereUniqueInput>
    connect?: Enumerable<LoanWhereUniqueInput>
    update?: Enumerable<LoanUpdateWithWhereUniqueWithoutBankInput>
    updateMany?: Enumerable<LoanUpdateManyWithWhereWithoutBankInput>
    deleteMany?: Enumerable<LoanScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutDsaInput = {
    create?: XOR<UserCreateWithoutDsaInput, UserUncheckedCreateWithoutDsaInput>
    connectOrCreate?: UserCreateOrConnectWithoutDsaInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDsaNestedInput = {
    create?: XOR<UserCreateWithoutDsaInput, UserUncheckedCreateWithoutDsaInput>
    connectOrCreate?: UserCreateOrConnectWithoutDsaInput
    upsert?: UserUpsertWithoutDsaInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutDsaInput, UserUncheckedUpdateWithoutDsaInput>
  }

  export type ApplicationCreateNestedOneWithoutPrefrInput = {
    create?: XOR<ApplicationCreateWithoutPrefrInput, ApplicationUncheckedCreateWithoutPrefrInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutPrefrInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutPrefrNestedInput = {
    create?: XOR<ApplicationCreateWithoutPrefrInput, ApplicationUncheckedCreateWithoutPrefrInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutPrefrInput
    upsert?: ApplicationUpsertWithoutPrefrInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<ApplicationUpdateWithoutPrefrInput, ApplicationUncheckedUpdateWithoutPrefrInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ApplicationCreateWithoutUserInput = {
    applicationName: string
    applicationGovId: string
    amount: number
    monthly_income: number
    createdAt?: Date | string
    loan: LoanCreateNestedOneWithoutApplicationsInput
    statuses?: StatusCreateNestedManyWithoutApplicationInput
    prefr?: PrefrCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutUserInput = {
    id?: number
    applicationName: string
    applicationGovId: string
    amount: number
    loanId: number
    monthly_income: number
    createdAt?: Date | string
    statuses?: StatusUncheckedCreateNestedManyWithoutApplicationInput
    prefr?: PrefrUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput>
  }

  export type ApplicationCreateManyUserInputEnvelope = {
    data: Enumerable<ApplicationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type StatusCreateWithoutUserInput = {
    status: string
    commissionAdded: boolean
    remark: string
    application: ApplicationCreateNestedOneWithoutStatusesInput
  }

  export type StatusUncheckedCreateWithoutUserInput = {
    id?: number
    status: string
    applicationId: number
    commissionAdded: boolean
    remark: string
  }

  export type StatusCreateOrConnectWithoutUserInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutUserInput, StatusUncheckedCreateWithoutUserInput>
  }

  export type StatusCreateManyUserInputEnvelope = {
    data: Enumerable<StatusCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type DsaCreateWithoutUserInput = {
    totalCommission?: number
    commissionRemaining?: number
    amountLoan?: number
    loansIssued?: number
    commissionPercentage?: number
  }

  export type DsaUncheckedCreateWithoutUserInput = {
    totalCommission?: number
    commissionRemaining?: number
    amountLoan?: number
    loansIssued?: number
    commissionPercentage?: number
  }

  export type DsaCreateOrConnectWithoutUserInput = {
    where: DsaWhereUniqueInput
    create: XOR<DsaCreateWithoutUserInput, DsaUncheckedCreateWithoutUserInput>
  }

  export type DsaCreateManyUserInputEnvelope = {
    data: Enumerable<DsaCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ApplicationUpsertWithWhereUniqueWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutUserInput, ApplicationUncheckedUpdateWithoutUserInput>
    create: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutUserInput, ApplicationUncheckedUpdateWithoutUserInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutUserInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutApplicationsInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: Enumerable<ApplicationScalarWhereInput>
    OR?: Enumerable<ApplicationScalarWhereInput>
    NOT?: Enumerable<ApplicationScalarWhereInput>
    id?: IntFilter | number
    applicationName?: StringFilter | string
    applicationGovId?: StringFilter | string
    amount?: IntFilter | number
    loanId?: IntFilter | number
    monthly_income?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type StatusUpsertWithWhereUniqueWithoutUserInput = {
    where: StatusWhereUniqueInput
    update: XOR<StatusUpdateWithoutUserInput, StatusUncheckedUpdateWithoutUserInput>
    create: XOR<StatusCreateWithoutUserInput, StatusUncheckedCreateWithoutUserInput>
  }

  export type StatusUpdateWithWhereUniqueWithoutUserInput = {
    where: StatusWhereUniqueInput
    data: XOR<StatusUpdateWithoutUserInput, StatusUncheckedUpdateWithoutUserInput>
  }

  export type StatusUpdateManyWithWhereWithoutUserInput = {
    where: StatusScalarWhereInput
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyWithoutStatusesInput>
  }

  export type StatusScalarWhereInput = {
    AND?: Enumerable<StatusScalarWhereInput>
    OR?: Enumerable<StatusScalarWhereInput>
    NOT?: Enumerable<StatusScalarWhereInput>
    id?: IntFilter | number
    status?: StringFilter | string
    userId?: IntFilter | number
    applicationId?: IntFilter | number
    commissionAdded?: BoolFilter | boolean
    remark?: StringFilter | string
  }

  export type DsaUpsertWithWhereUniqueWithoutUserInput = {
    where: DsaWhereUniqueInput
    update: XOR<DsaUpdateWithoutUserInput, DsaUncheckedUpdateWithoutUserInput>
    create: XOR<DsaCreateWithoutUserInput, DsaUncheckedCreateWithoutUserInput>
  }

  export type DsaUpdateWithWhereUniqueWithoutUserInput = {
    where: DsaWhereUniqueInput
    data: XOR<DsaUpdateWithoutUserInput, DsaUncheckedUpdateWithoutUserInput>
  }

  export type DsaUpdateManyWithWhereWithoutUserInput = {
    where: DsaScalarWhereInput
    data: XOR<DsaUpdateManyMutationInput, DsaUncheckedUpdateManyWithoutDsaInput>
  }

  export type DsaScalarWhereInput = {
    AND?: Enumerable<DsaScalarWhereInput>
    OR?: Enumerable<DsaScalarWhereInput>
    NOT?: Enumerable<DsaScalarWhereInput>
    dsaId?: IntFilter | number
    totalCommission?: FloatFilter | number
    commissionRemaining?: FloatFilter | number
    amountLoan?: FloatFilter | number
    loansIssued?: IntFilter | number
    commissionPercentage?: FloatFilter | number
  }

  export type LoanTypeCreateWithoutLoansInput = {
    loanName: string
  }

  export type LoanTypeUncheckedCreateWithoutLoansInput = {
    id?: number
    loanName: string
  }

  export type LoanTypeCreateOrConnectWithoutLoansInput = {
    where: LoanTypeWhereUniqueInput
    create: XOR<LoanTypeCreateWithoutLoansInput, LoanTypeUncheckedCreateWithoutLoansInput>
  }

  export type BankCreateWithoutLoansInput = {
    bankName: string
  }

  export type BankUncheckedCreateWithoutLoansInput = {
    id?: number
    bankName: string
  }

  export type BankCreateOrConnectWithoutLoansInput = {
    where: BankWhereUniqueInput
    create: XOR<BankCreateWithoutLoansInput, BankUncheckedCreateWithoutLoansInput>
  }

  export type ApplicationCreateWithoutLoanInput = {
    applicationName: string
    applicationGovId: string
    amount: number
    monthly_income: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutApplicationsInput
    statuses?: StatusCreateNestedManyWithoutApplicationInput
    prefr?: PrefrCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutLoanInput = {
    id?: number
    applicationName: string
    applicationGovId: string
    amount: number
    monthly_income: number
    userId: number
    createdAt?: Date | string
    statuses?: StatusUncheckedCreateNestedManyWithoutApplicationInput
    prefr?: PrefrUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutLoanInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutLoanInput, ApplicationUncheckedCreateWithoutLoanInput>
  }

  export type ApplicationCreateManyLoanInputEnvelope = {
    data: Enumerable<ApplicationCreateManyLoanInput>
    skipDuplicates?: boolean
  }

  export type LoanTypeUpsertWithoutLoansInput = {
    update: XOR<LoanTypeUpdateWithoutLoansInput, LoanTypeUncheckedUpdateWithoutLoansInput>
    create: XOR<LoanTypeCreateWithoutLoansInput, LoanTypeUncheckedCreateWithoutLoansInput>
  }

  export type LoanTypeUpdateWithoutLoansInput = {
    loanName?: StringFieldUpdateOperationsInput | string
  }

  export type LoanTypeUncheckedUpdateWithoutLoansInput = {
    id?: IntFieldUpdateOperationsInput | number
    loanName?: StringFieldUpdateOperationsInput | string
  }

  export type BankUpsertWithoutLoansInput = {
    update: XOR<BankUpdateWithoutLoansInput, BankUncheckedUpdateWithoutLoansInput>
    create: XOR<BankCreateWithoutLoansInput, BankUncheckedCreateWithoutLoansInput>
  }

  export type BankUpdateWithoutLoansInput = {
    bankName?: StringFieldUpdateOperationsInput | string
  }

  export type BankUncheckedUpdateWithoutLoansInput = {
    id?: IntFieldUpdateOperationsInput | number
    bankName?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationUpsertWithWhereUniqueWithoutLoanInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutLoanInput, ApplicationUncheckedUpdateWithoutLoanInput>
    create: XOR<ApplicationCreateWithoutLoanInput, ApplicationUncheckedCreateWithoutLoanInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutLoanInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutLoanInput, ApplicationUncheckedUpdateWithoutLoanInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutLoanInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutApplicationsInput>
  }

  export type LoanCreateWithoutApplicationsInput = {
    interest: number
    commission: number
    loanType: LoanTypeCreateNestedOneWithoutLoansInput
    bank: BankCreateNestedOneWithoutLoansInput
  }

  export type LoanUncheckedCreateWithoutApplicationsInput = {
    id?: number
    typeId: number
    bankId: number
    interest: number
    commission: number
  }

  export type LoanCreateOrConnectWithoutApplicationsInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutApplicationsInput, LoanUncheckedCreateWithoutApplicationsInput>
  }

  export type UserCreateWithoutApplicationsInput = {
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt?: Date | string
    statuses?: StatusCreateNestedManyWithoutUserInput
    dsa?: DsaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApplicationsInput = {
    id?: number
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt?: Date | string
    statuses?: StatusUncheckedCreateNestedManyWithoutUserInput
    dsa?: DsaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApplicationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
  }

  export type StatusCreateWithoutApplicationInput = {
    status: string
    commissionAdded: boolean
    remark: string
    user: UserCreateNestedOneWithoutStatusesInput
  }

  export type StatusUncheckedCreateWithoutApplicationInput = {
    id?: number
    status: string
    userId: number
    commissionAdded: boolean
    remark: string
  }

  export type StatusCreateOrConnectWithoutApplicationInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutApplicationInput, StatusUncheckedCreateWithoutApplicationInput>
  }

  export type StatusCreateManyApplicationInputEnvelope = {
    data: Enumerable<StatusCreateManyApplicationInput>
    skipDuplicates?: boolean
  }

  export type PrefrCreateWithoutApplicationInput = {
    loanId: string
  }

  export type PrefrUncheckedCreateWithoutApplicationInput = {
    loanId: string
  }

  export type PrefrCreateOrConnectWithoutApplicationInput = {
    where: PrefrWhereUniqueInput
    create: XOR<PrefrCreateWithoutApplicationInput, PrefrUncheckedCreateWithoutApplicationInput>
  }

  export type PrefrCreateManyApplicationInputEnvelope = {
    data: Enumerable<PrefrCreateManyApplicationInput>
    skipDuplicates?: boolean
  }

  export type LoanUpsertWithoutApplicationsInput = {
    update: XOR<LoanUpdateWithoutApplicationsInput, LoanUncheckedUpdateWithoutApplicationsInput>
    create: XOR<LoanCreateWithoutApplicationsInput, LoanUncheckedCreateWithoutApplicationsInput>
  }

  export type LoanUpdateWithoutApplicationsInput = {
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    loanType?: LoanTypeUpdateOneRequiredWithoutLoansNestedInput
    bank?: BankUpdateOneRequiredWithoutLoansNestedInput
  }

  export type LoanUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    bankId?: IntFieldUpdateOperationsInput | number
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutApplicationsInput = {
    update: XOR<UserUpdateWithoutApplicationsInput, UserUncheckedUpdateWithoutApplicationsInput>
    create: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
  }

  export type UserUpdateWithoutApplicationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: StatusUpdateManyWithoutUserNestedInput
    dsa?: DsaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: StatusUncheckedUpdateManyWithoutUserNestedInput
    dsa?: DsaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StatusUpsertWithWhereUniqueWithoutApplicationInput = {
    where: StatusWhereUniqueInput
    update: XOR<StatusUpdateWithoutApplicationInput, StatusUncheckedUpdateWithoutApplicationInput>
    create: XOR<StatusCreateWithoutApplicationInput, StatusUncheckedCreateWithoutApplicationInput>
  }

  export type StatusUpdateWithWhereUniqueWithoutApplicationInput = {
    where: StatusWhereUniqueInput
    data: XOR<StatusUpdateWithoutApplicationInput, StatusUncheckedUpdateWithoutApplicationInput>
  }

  export type StatusUpdateManyWithWhereWithoutApplicationInput = {
    where: StatusScalarWhereInput
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyWithoutStatusesInput>
  }

  export type PrefrUpsertWithWhereUniqueWithoutApplicationInput = {
    where: PrefrWhereUniqueInput
    update: XOR<PrefrUpdateWithoutApplicationInput, PrefrUncheckedUpdateWithoutApplicationInput>
    create: XOR<PrefrCreateWithoutApplicationInput, PrefrUncheckedCreateWithoutApplicationInput>
  }

  export type PrefrUpdateWithWhereUniqueWithoutApplicationInput = {
    where: PrefrWhereUniqueInput
    data: XOR<PrefrUpdateWithoutApplicationInput, PrefrUncheckedUpdateWithoutApplicationInput>
  }

  export type PrefrUpdateManyWithWhereWithoutApplicationInput = {
    where: PrefrScalarWhereInput
    data: XOR<PrefrUpdateManyMutationInput, PrefrUncheckedUpdateManyWithoutPrefrInput>
  }

  export type PrefrScalarWhereInput = {
    AND?: Enumerable<PrefrScalarWhereInput>
    OR?: Enumerable<PrefrScalarWhereInput>
    NOT?: Enumerable<PrefrScalarWhereInput>
    applicationId?: IntFilter | number
    loanId?: StringFilter | string
  }

  export type UserCreateWithoutStatusesInput = {
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutUserInput
    dsa?: DsaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStatusesInput = {
    id?: number
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    dsa?: DsaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStatusesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatusesInput, UserUncheckedCreateWithoutStatusesInput>
  }

  export type ApplicationCreateWithoutStatusesInput = {
    applicationName: string
    applicationGovId: string
    amount: number
    monthly_income: number
    createdAt?: Date | string
    loan: LoanCreateNestedOneWithoutApplicationsInput
    user: UserCreateNestedOneWithoutApplicationsInput
    prefr?: PrefrCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutStatusesInput = {
    id?: number
    applicationName: string
    applicationGovId: string
    amount: number
    loanId: number
    monthly_income: number
    userId: number
    createdAt?: Date | string
    prefr?: PrefrUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutStatusesInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutStatusesInput, ApplicationUncheckedCreateWithoutStatusesInput>
  }

  export type UserUpsertWithoutStatusesInput = {
    update: XOR<UserUpdateWithoutStatusesInput, UserUncheckedUpdateWithoutStatusesInput>
    create: XOR<UserCreateWithoutStatusesInput, UserUncheckedCreateWithoutStatusesInput>
  }

  export type UserUpdateWithoutStatusesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    dsa?: DsaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    dsa?: DsaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApplicationUpsertWithoutStatusesInput = {
    update: XOR<ApplicationUpdateWithoutStatusesInput, ApplicationUncheckedUpdateWithoutStatusesInput>
    create: XOR<ApplicationCreateWithoutStatusesInput, ApplicationUncheckedCreateWithoutStatusesInput>
  }

  export type ApplicationUpdateWithoutStatusesInput = {
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutApplicationsNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    prefr?: PrefrUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutStatusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    loanId?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prefr?: PrefrUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type LoanCreateWithoutLoanTypeInput = {
    interest: number
    commission: number
    bank: BankCreateNestedOneWithoutLoansInput
    applications?: ApplicationCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutLoanTypeInput = {
    id?: number
    bankId: number
    interest: number
    commission: number
    applications?: ApplicationUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutLoanTypeInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutLoanTypeInput, LoanUncheckedCreateWithoutLoanTypeInput>
  }

  export type LoanCreateManyLoanTypeInputEnvelope = {
    data: Enumerable<LoanCreateManyLoanTypeInput>
    skipDuplicates?: boolean
  }

  export type LoanUpsertWithWhereUniqueWithoutLoanTypeInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutLoanTypeInput, LoanUncheckedUpdateWithoutLoanTypeInput>
    create: XOR<LoanCreateWithoutLoanTypeInput, LoanUncheckedCreateWithoutLoanTypeInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutLoanTypeInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutLoanTypeInput, LoanUncheckedUpdateWithoutLoanTypeInput>
  }

  export type LoanUpdateManyWithWhereWithoutLoanTypeInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutLoansInput>
  }

  export type LoanScalarWhereInput = {
    AND?: Enumerable<LoanScalarWhereInput>
    OR?: Enumerable<LoanScalarWhereInput>
    NOT?: Enumerable<LoanScalarWhereInput>
    id?: IntFilter | number
    typeId?: IntFilter | number
    bankId?: IntFilter | number
    interest?: FloatFilter | number
    commission?: FloatFilter | number
  }

  export type LoanCreateWithoutBankInput = {
    interest: number
    commission: number
    loanType: LoanTypeCreateNestedOneWithoutLoansInput
    applications?: ApplicationCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutBankInput = {
    id?: number
    typeId: number
    interest: number
    commission: number
    applications?: ApplicationUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutBankInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutBankInput, LoanUncheckedCreateWithoutBankInput>
  }

  export type LoanCreateManyBankInputEnvelope = {
    data: Enumerable<LoanCreateManyBankInput>
    skipDuplicates?: boolean
  }

  export type LoanUpsertWithWhereUniqueWithoutBankInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutBankInput, LoanUncheckedUpdateWithoutBankInput>
    create: XOR<LoanCreateWithoutBankInput, LoanUncheckedCreateWithoutBankInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutBankInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutBankInput, LoanUncheckedUpdateWithoutBankInput>
  }

  export type LoanUpdateManyWithWhereWithoutBankInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutLoansInput>
  }

  export type UserCreateWithoutDsaInput = {
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutUserInput
    statuses?: StatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDsaInput = {
    id?: number
    username: string
    email: string
    password: string
    role: string
    phoneNumber: string
    name: string
    city: string
    pincode: string
    createdAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    statuses?: StatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDsaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDsaInput, UserUncheckedCreateWithoutDsaInput>
  }

  export type UserUpsertWithoutDsaInput = {
    update: XOR<UserUpdateWithoutDsaInput, UserUncheckedUpdateWithoutDsaInput>
    create: XOR<UserCreateWithoutDsaInput, UserUncheckedCreateWithoutDsaInput>
  }

  export type UserUpdateWithoutDsaInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutUserNestedInput
    statuses?: StatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDsaInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    statuses?: StatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApplicationCreateWithoutPrefrInput = {
    applicationName: string
    applicationGovId: string
    amount: number
    monthly_income: number
    createdAt?: Date | string
    loan: LoanCreateNestedOneWithoutApplicationsInput
    user: UserCreateNestedOneWithoutApplicationsInput
    statuses?: StatusCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutPrefrInput = {
    id?: number
    applicationName: string
    applicationGovId: string
    amount: number
    loanId: number
    monthly_income: number
    userId: number
    createdAt?: Date | string
    statuses?: StatusUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutPrefrInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutPrefrInput, ApplicationUncheckedCreateWithoutPrefrInput>
  }

  export type ApplicationUpsertWithoutPrefrInput = {
    update: XOR<ApplicationUpdateWithoutPrefrInput, ApplicationUncheckedUpdateWithoutPrefrInput>
    create: XOR<ApplicationCreateWithoutPrefrInput, ApplicationUncheckedCreateWithoutPrefrInput>
  }

  export type ApplicationUpdateWithoutPrefrInput = {
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutApplicationsNestedInput
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    statuses?: StatusUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutPrefrInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    loanId?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: StatusUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyUserInput = {
    id?: number
    applicationName: string
    applicationGovId: string
    amount: number
    loanId: number
    monthly_income: number
    createdAt?: Date | string
  }

  export type StatusCreateManyUserInput = {
    id?: number
    status: string
    applicationId: number
    commissionAdded: boolean
    remark: string
  }

  export type DsaCreateManyUserInput = {
    totalCommission?: number
    commissionRemaining?: number
    amountLoan?: number
    loansIssued?: number
    commissionPercentage?: number
  }

  export type ApplicationUpdateWithoutUserInput = {
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutApplicationsNestedInput
    statuses?: StatusUpdateManyWithoutApplicationNestedInput
    prefr?: PrefrUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    loanId?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: StatusUncheckedUpdateManyWithoutApplicationNestedInput
    prefr?: PrefrUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    loanId?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    commissionAdded?: BoolFieldUpdateOperationsInput | boolean
    remark?: StringFieldUpdateOperationsInput | string
    application?: ApplicationUpdateOneRequiredWithoutStatusesNestedInput
  }

  export type StatusUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    applicationId?: IntFieldUpdateOperationsInput | number
    commissionAdded?: BoolFieldUpdateOperationsInput | boolean
    remark?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateManyWithoutStatusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    applicationId?: IntFieldUpdateOperationsInput | number
    commissionAdded?: BoolFieldUpdateOperationsInput | boolean
    remark?: StringFieldUpdateOperationsInput | string
  }

  export type DsaUpdateWithoutUserInput = {
    totalCommission?: FloatFieldUpdateOperationsInput | number
    commissionRemaining?: FloatFieldUpdateOperationsInput | number
    amountLoan?: FloatFieldUpdateOperationsInput | number
    loansIssued?: IntFieldUpdateOperationsInput | number
    commissionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type DsaUncheckedUpdateWithoutUserInput = {
    totalCommission?: FloatFieldUpdateOperationsInput | number
    commissionRemaining?: FloatFieldUpdateOperationsInput | number
    amountLoan?: FloatFieldUpdateOperationsInput | number
    loansIssued?: IntFieldUpdateOperationsInput | number
    commissionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type DsaUncheckedUpdateManyWithoutDsaInput = {
    totalCommission?: FloatFieldUpdateOperationsInput | number
    commissionRemaining?: FloatFieldUpdateOperationsInput | number
    amountLoan?: FloatFieldUpdateOperationsInput | number
    loansIssued?: IntFieldUpdateOperationsInput | number
    commissionPercentage?: FloatFieldUpdateOperationsInput | number
  }

  export type ApplicationCreateManyLoanInput = {
    id?: number
    applicationName: string
    applicationGovId: string
    amount: number
    monthly_income: number
    userId: number
    createdAt?: Date | string
  }

  export type ApplicationUpdateWithoutLoanInput = {
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    statuses?: StatusUpdateManyWithoutApplicationNestedInput
    prefr?: PrefrUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutLoanInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationName?: StringFieldUpdateOperationsInput | string
    applicationGovId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    monthly_income?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statuses?: StatusUncheckedUpdateManyWithoutApplicationNestedInput
    prefr?: PrefrUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type StatusCreateManyApplicationInput = {
    id?: number
    status: string
    userId: number
    commissionAdded: boolean
    remark: string
  }

  export type PrefrCreateManyApplicationInput = {
    loanId: string
  }

  export type StatusUpdateWithoutApplicationInput = {
    status?: StringFieldUpdateOperationsInput | string
    commissionAdded?: BoolFieldUpdateOperationsInput | boolean
    remark?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutStatusesNestedInput
  }

  export type StatusUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    commissionAdded?: BoolFieldUpdateOperationsInput | boolean
    remark?: StringFieldUpdateOperationsInput | string
  }

  export type PrefrUpdateWithoutApplicationInput = {
    loanId?: StringFieldUpdateOperationsInput | string
  }

  export type PrefrUncheckedUpdateWithoutApplicationInput = {
    loanId?: StringFieldUpdateOperationsInput | string
  }

  export type PrefrUncheckedUpdateManyWithoutPrefrInput = {
    loanId?: StringFieldUpdateOperationsInput | string
  }

  export type LoanCreateManyLoanTypeInput = {
    id?: number
    bankId: number
    interest: number
    commission: number
  }

  export type LoanUpdateWithoutLoanTypeInput = {
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    bank?: BankUpdateOneRequiredWithoutLoansNestedInput
    applications?: ApplicationUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutLoanTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    bankId?: IntFieldUpdateOperationsInput | number
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    applications?: ApplicationUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateManyWithoutLoansInput = {
    id?: IntFieldUpdateOperationsInput | number
    bankId?: IntFieldUpdateOperationsInput | number
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
  }

  export type LoanCreateManyBankInput = {
    id?: number
    typeId: number
    interest: number
    commission: number
  }

  export type LoanUpdateWithoutBankInput = {
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    loanType?: LoanTypeUpdateOneRequiredWithoutLoansNestedInput
    applications?: ApplicationUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    interest?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    applications?: ApplicationUncheckedUpdateManyWithoutLoanNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}